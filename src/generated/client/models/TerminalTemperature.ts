/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Represents a single terminal temperature reading record
 * @export
 * @interface TerminalTemperature
 */
export interface TerminalTemperature {
    /**
     * Unique identifier for the temperature record
     * @type {string}
     * @memberof TerminalTemperature
     */
    readonly id?: string;
    /**
     * The ID of the thermometer from which the reading was taken
     * @type {string}
     * @memberof TerminalTemperature
     */
    thermometerId: string;
    /**
     * The temperature value in Celsius
     * @type {number}
     * @memberof TerminalTemperature
     */
    value: number;
    /**
     * The timestamp when the temperature was recorded
     * @type {number}
     * @memberof TerminalTemperature
     */
    timestamp: number;
}

/**
 * Check if a given object implements the TerminalTemperature interface.
 */
export function instanceOfTerminalTemperature(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "thermometerId" in value;
    isInstance = isInstance && "value" in value;
    isInstance = isInstance && "timestamp" in value;

    return isInstance;
}

export function TerminalTemperatureFromJSON(json: any): TerminalTemperature {
    return TerminalTemperatureFromJSONTyped(json, false);
}

export function TerminalTemperatureFromJSONTyped(json: any, ignoreDiscriminator: boolean): TerminalTemperature {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'thermometerId': json['thermometerId'],
        'value': json['value'],
        'timestamp': json['timestamp'],
    };
}

export function TerminalTemperatureToJSON(value?: TerminalTemperature | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'thermometerId': value.thermometerId,
        'value': value.value,
        'timestamp': value.timestamp,
    };
}

