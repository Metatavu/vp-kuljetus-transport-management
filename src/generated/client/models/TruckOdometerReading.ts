/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TruckOdometerReading
 */
export interface TruckOdometerReading {
    /**
     * Truck odometer ID
     * @type {string}
     * @memberof TruckOdometerReading
     */
    readonly id?: string;
    /**
     * Timestamp for truck odometer.
     * @type {number}
     * @memberof TruckOdometerReading
     */
    timestamp: number;
    /**
     * Odometer reading in meters. See [Teltonika FMC650 Data Sending Parameters ID - Tachograph Data Elements](https://wiki.teltonika-gps.com/view/FMC650_Teltonika_Data_Sending_Parameters_ID#Tachograph_data_elements)
     * @type {number}
     * @memberof TruckOdometerReading
     */
    odometerReading: number;
}

/**
 * Check if a given object implements the TruckOdometerReading interface.
 */
export function instanceOfTruckOdometerReading(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "timestamp" in value;
    isInstance = isInstance && "odometerReading" in value;

    return isInstance;
}

export function TruckOdometerReadingFromJSON(json: any): TruckOdometerReading {
    return TruckOdometerReadingFromJSONTyped(json, false);
}

export function TruckOdometerReadingFromJSONTyped(json: any, ignoreDiscriminator: boolean): TruckOdometerReading {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'timestamp': json['timestamp'],
        'odometerReading': json['odometerReading'],
    };
}

export function TruckOdometerReadingToJSON(value?: TruckOdometerReading | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'timestamp': value.timestamp,
        'odometerReading': value.odometerReading,
    };
}

