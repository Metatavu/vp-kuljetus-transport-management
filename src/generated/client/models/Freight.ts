/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Represents a single freight shipment, aka. waybill.
 * @export
 * @interface Freight
 */
export interface Freight {
    /**
     * 
     * @type {string}
     * @memberof Freight
     */
    readonly id?: string;
    /**
     * Freight number. Unique and auto-incremented.
     * @type {number}
     * @memberof Freight
     */
    readonly freightNumber?: number;
    /**
     * Sender of the shipment
     * @type {string}
     * @memberof Freight
     */
    sender: string;
    /**
     * Receiver of the shipment
     * @type {string}
     * @memberof Freight
     */
    recipient: string;
    /**
     * Payer of the shipment
     * @type {string}
     * @memberof Freight
     */
    payer?: string;
    /**
     * Point of departure
     * @type {string}
     * @memberof Freight
     */
    pointOfDeparture: string;
    /**
     * Point of arrival
     * @type {string}
     * @memberof Freight
     */
    destination: string;
    /**
     * Shipment info
     * @type {string}
     * @memberof Freight
     */
    shipmentInfo?: string;
    /**
     * Minimum temperature of the shipment
     * @type {number}
     * @memberof Freight
     */
    temperatureMin?: number;
    /**
     * Maximum temperature of the shipment
     * @type {number}
     * @memberof Freight
     */
    temperatureMax?: number;
    /**
     * Reservations for the shipment
     * @type {string}
     * @memberof Freight
     */
    reservations?: string;
    /**
     * 
     * @type {string}
     * @memberof Freight
     */
    readonly creatorId?: string;
    /**
     * 
     * @type {Date}
     * @memberof Freight
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Freight
     */
    readonly lastModifierId?: string;
    /**
     * 
     * @type {Date}
     * @memberof Freight
     */
    readonly modifiedAt?: Date;
}

/**
 * Check if a given object implements the Freight interface.
 */
export function instanceOfFreight(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "sender" in value;
    isInstance = isInstance && "recipient" in value;
    isInstance = isInstance && "pointOfDeparture" in value;
    isInstance = isInstance && "destination" in value;

    return isInstance;
}

export function FreightFromJSON(json: any): Freight {
    return FreightFromJSONTyped(json, false);
}

export function FreightFromJSONTyped(json: any, ignoreDiscriminator: boolean): Freight {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'freightNumber': !exists(json, 'freightNumber') ? undefined : json['freightNumber'],
        'sender': json['sender'],
        'recipient': json['recipient'],
        'payer': !exists(json, 'payer') ? undefined : json['payer'],
        'pointOfDeparture': json['pointOfDeparture'],
        'destination': json['destination'],
        'shipmentInfo': !exists(json, 'shipmentInfo') ? undefined : json['shipmentInfo'],
        'temperatureMin': !exists(json, 'temperatureMin') ? undefined : json['temperatureMin'],
        'temperatureMax': !exists(json, 'temperatureMax') ? undefined : json['temperatureMax'],
        'reservations': !exists(json, 'reservations') ? undefined : json['reservations'],
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
    };
}

export function FreightToJSON(value?: Freight | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sender': value.sender,
        'recipient': value.recipient,
        'payer': value.payer,
        'pointOfDeparture': value.pointOfDeparture,
        'destination': value.destination,
        'shipmentInfo': value.shipmentInfo,
        'temperatureMin': value.temperatureMin,
        'temperatureMax': value.temperatureMax,
        'reservations': value.reservations,
    };
}

