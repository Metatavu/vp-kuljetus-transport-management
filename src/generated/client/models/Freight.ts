/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Represents a single freight shipment, aka. waybill.
 * @export
 * @interface Freight
 */
export interface Freight {
    /**
     * 
     * @type {string}
     * @memberof Freight
     */
    readonly id?: string;
    /**
     * Freight number. Unique and auto-incremented.
     * @type {number}
     * @memberof Freight
     */
    readonly freightNumber?: number;
    /**
     * Shipment sender site
     * @type {string}
     * @memberof Freight
     */
    senderSiteId: string;
    /**
     * Shipment receiver site
     * @type {string}
     * @memberof Freight
     */
    recipientSiteId: string;
    /**
     * Point of departure site
     * @type {string}
     * @memberof Freight
     */
    pointOfDepartureSiteId: string;
    /**
     * Point of arrival site
     * @type {string}
     * @memberof Freight
     */
    destinationSiteId: string;
    /**
     * 
     * @type {string}
     * @memberof Freight
     */
    readonly creatorId?: string;
    /**
     * 
     * @type {Date}
     * @memberof Freight
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Freight
     */
    readonly lastModifierId?: string;
    /**
     * 
     * @type {Date}
     * @memberof Freight
     */
    readonly modifiedAt?: Date;
}

/**
 * Check if a given object implements the Freight interface.
 */
export function instanceOfFreight(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "senderSiteId" in value;
    isInstance = isInstance && "recipientSiteId" in value;
    isInstance = isInstance && "pointOfDepartureSiteId" in value;
    isInstance = isInstance && "destinationSiteId" in value;

    return isInstance;
}

export function FreightFromJSON(json: any): Freight {
    return FreightFromJSONTyped(json, false);
}

export function FreightFromJSONTyped(json: any, ignoreDiscriminator: boolean): Freight {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'freightNumber': !exists(json, 'freightNumber') ? undefined : json['freightNumber'],
        'senderSiteId': json['senderSiteId'],
        'recipientSiteId': json['recipientSiteId'],
        'pointOfDepartureSiteId': json['pointOfDepartureSiteId'],
        'destinationSiteId': json['destinationSiteId'],
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
    };
}

export function FreightToJSON(value?: Freight | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'senderSiteId': value.senderSiteId,
        'recipientSiteId': value.recipientSiteId,
        'pointOfDepartureSiteId': value.pointOfDepartureSiteId,
        'destinationSiteId': value.destinationSiteId,
    };
}

