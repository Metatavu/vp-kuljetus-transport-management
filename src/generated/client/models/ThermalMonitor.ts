/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ThermalMonitorStatus } from './ThermalMonitorStatus';
import {
    ThermalMonitorStatusFromJSON,
    ThermalMonitorStatusFromJSONTyped,
    ThermalMonitorStatusToJSON,
} from './ThermalMonitorStatus';

/**
 * Represents a single monitor
 * @export
 * @interface ThermalMonitor
 */
export interface ThermalMonitor {
    /**
     * 
     * @type {string}
     * @memberof ThermalMonitor
     */
    readonly id?: string;
    /**
     * a human-readable name for the monitor
     * @type {string}
     * @memberof ThermalMonitor
     */
    name: string;
    /**
     * 
     * @type {ThermalMonitorStatus}
     * @memberof ThermalMonitor
     */
    status: ThermalMonitorStatus;
    /**
     * 
     * @type {Array<string>}
     * @memberof ThermalMonitor
     */
    thermometerIds: Array<string>;
    /**
     * The lowest allowed temperature before triggering an incident. If this field is not set, the monitor will not trigger an incident based on the lower threshold.
     * @type {number}
     * @memberof ThermalMonitor
     */
    lowerThresholdTemperature?: number;
    /**
     * The highest allowed temperature before triggering an incident. If this field is not set, the monitor will not trigger an incident based on the upper threshold.
     * @type {number}
     * @memberof ThermalMonitor
     */
    upperThresholdTemperature?: number;
    /**
     * The time when the monitor starts monitoring
     * @type {Date}
     * @memberof ThermalMonitor
     */
    activeFrom?: Date;
    /**
     * The time when the monitor stops monitoring
     * @type {Date}
     * @memberof ThermalMonitor
     */
    activeTo?: Date;
    /**
     * 
     * @type {string}
     * @memberof ThermalMonitor
     */
    readonly creatorId?: string;
    /**
     * 
     * @type {Date}
     * @memberof ThermalMonitor
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof ThermalMonitor
     */
    readonly lastModifierId?: string;
    /**
     * 
     * @type {Date}
     * @memberof ThermalMonitor
     */
    readonly modifiedAt?: Date;
}

/**
 * Check if a given object implements the ThermalMonitor interface.
 */
export function instanceOfThermalMonitor(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "thermometerIds" in value;

    return isInstance;
}

export function ThermalMonitorFromJSON(json: any): ThermalMonitor {
    return ThermalMonitorFromJSONTyped(json, false);
}

export function ThermalMonitorFromJSONTyped(json: any, ignoreDiscriminator: boolean): ThermalMonitor {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': json['name'],
        'status': ThermalMonitorStatusFromJSON(json['status']),
        'thermometerIds': json['thermometerIds'],
        'lowerThresholdTemperature': !exists(json, 'lowerThresholdTemperature') ? undefined : json['lowerThresholdTemperature'],
        'upperThresholdTemperature': !exists(json, 'upperThresholdTemperature') ? undefined : json['upperThresholdTemperature'],
        'activeFrom': !exists(json, 'activeFrom') ? undefined : (new Date(json['activeFrom'])),
        'activeTo': !exists(json, 'activeTo') ? undefined : (new Date(json['activeTo'])),
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
    };
}

export function ThermalMonitorToJSON(value?: ThermalMonitor | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'status': ThermalMonitorStatusToJSON(value.status),
        'thermometerIds': value.thermometerIds,
        'lowerThresholdTemperature': value.lowerThresholdTemperature,
        'upperThresholdTemperature': value.upperThresholdTemperature,
        'activeFrom': value.activeFrom === undefined ? undefined : (value.activeFrom.toISOString()),
        'activeTo': value.activeTo === undefined ? undefined : (value.activeTo.toISOString()),
    };
}

