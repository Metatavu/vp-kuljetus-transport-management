/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Represent single vehicle
 * @export
 * @interface Vehicle
 */
export interface Vehicle {
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    readonly id?: string;
    /**
     * Truck that towing the vehicle
     * @type {string}
     * @memberof Vehicle
     */
    truckId: string;
    /**
     * List of attached towables to vehicle. Order of towables should reflect the order of towables in the vehicle where first towable is the closest to the truck.
     * 
     * @type {Array<string>}
     * @memberof Vehicle
     */
    towableIds: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    readonly creatorId?: string;
    /**
     * 
     * @type {Date}
     * @memberof Vehicle
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Vehicle
     */
    readonly lastModifierId?: string;
    /**
     * 
     * @type {Date}
     * @memberof Vehicle
     */
    readonly modifiedAt?: Date;
    /**
     * Setting the archivedAt time marks the vehicle as archived. Vehicles marked as archived will not appear in list requests unless archived filter is set to true. Archived vehicle cannot be updated, unless archivedAt is first set to null.
     * 
     * @type {Date}
     * @memberof Vehicle
     */
    archivedAt?: Date;
}

/**
 * Check if a given object implements the Vehicle interface.
 */
export function instanceOfVehicle(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "truckId" in value;
    isInstance = isInstance && "towableIds" in value;

    return isInstance;
}

export function VehicleFromJSON(json: any): Vehicle {
    return VehicleFromJSONTyped(json, false);
}

export function VehicleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Vehicle {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'truckId': json['truckId'],
        'towableIds': json['towableIds'],
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
        'archivedAt': !exists(json, 'archivedAt') ? undefined : (new Date(json['archivedAt'])),
    };
}

export function VehicleToJSON(value?: Vehicle | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'truckId': value.truckId,
        'towableIds': value.towableIds,
        'archivedAt': value.archivedAt === undefined ? undefined : (value.archivedAt.toISOString()),
    };
}

