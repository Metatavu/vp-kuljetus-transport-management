/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Represents a thermometer attached to a terminal
 * @export
 * @interface TerminalThermometer
 */
export interface TerminalThermometer {
    /**
     * Unique identifier for the thermometer
     * @type {string}
     * @memberof TerminalThermometer
     */
    readonly id?: string;
    /**
     * Name of the thermometer
     * @type {string}
     * @memberof TerminalThermometer
     */
    name?: string;
    /**
     * Hardware address of the thermometer. It is unique and stays with the device.
     * @type {string}
     * @memberof TerminalThermometer
     */
    hardwareSensorId: string;
    /**
     * Identifier of the device. It is unique and stays with the device.
     * @type {string}
     * @memberof TerminalThermometer
     */
    deviceIdentifier: string;
    /**
     * The ID of the site (terminal) currently associated with the thermometer.
     * @type {string}
     * @memberof TerminalThermometer
     */
    siteId: string;
    /**
     * 
     * @type {string}
     * @memberof TerminalThermometer
     */
    readonly creatorId?: string;
    /**
     * 
     * @type {Date}
     * @memberof TerminalThermometer
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof TerminalThermometer
     */
    readonly lastModifierId?: string;
    /**
     * 
     * @type {Date}
     * @memberof TerminalThermometer
     */
    readonly modifiedAt?: Date;
    /**
     * Setting the archivedAt time marks the thermometer as archived. Thermometers marked as archived will not appear in list requests unless includeArchived filter is set to true. Archived thermometer cannot be updated, unless archivedAt is first set to null.
     * 
     * @type {Date}
     * @memberof TerminalThermometer
     */
    archivedAt?: Date;
}

/**
 * Check if a given object implements the TerminalThermometer interface.
 */
export function instanceOfTerminalThermometer(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "hardwareSensorId" in value;
    isInstance = isInstance && "deviceIdentifier" in value;
    isInstance = isInstance && "siteId" in value;

    return isInstance;
}

export function TerminalThermometerFromJSON(json: any): TerminalThermometer {
    return TerminalThermometerFromJSONTyped(json, false);
}

export function TerminalThermometerFromJSONTyped(json: any, ignoreDiscriminator: boolean): TerminalThermometer {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'hardwareSensorId': json['hardwareSensorId'],
        'deviceIdentifier': json['deviceIdentifier'],
        'siteId': json['siteId'],
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
        'archivedAt': !exists(json, 'archivedAt') ? undefined : (new Date(json['archivedAt'])),
    };
}

export function TerminalThermometerToJSON(value?: TerminalThermometer | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'hardwareSensorId': value.hardwareSensorId,
        'deviceIdentifier': value.deviceIdentifier,
        'siteId': value.siteId,
        'archivedAt': value.archivedAt === undefined ? undefined : (value.archivedAt.toISOString()),
    };
}

