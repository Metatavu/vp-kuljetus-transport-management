/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { WorkType } from './WorkType';
import {
    WorkTypeFromJSON,
    WorkTypeFromJSONTyped,
    WorkTypeToJSON,
} from './WorkType';

/**
 * Represents a single work shift hours.
 * 
 * Work shift hours contain the total hours for a specific employee, work shift and work type. The hours are always
 * calculated dynamically during a request.
 * 
 * Work shift hours also contains the actual hours that have been manually set by a supervisor. The actual hours
 * should always be prioritized over the calculated hours when displaying the aggregated hours and sending the
 * data to payroll.
 * 
 * Work shift hours for all available work types are created automatically when related employee work shift is created.
 * Only a single work shift hours per employee per work shift per work type is allowed. If one already exists, it
 * should be updated.
 * 
 * Work shift hours cannot be updated if the related employee work shift is approved.
 * 
 * #### Work shift hours calculation
 * 
 * Following work event types are only used to track the life cycle of the employee work shift. Hence, these types
 * are not used in calculations at all.
 * - SHIFT_START
 * - SHIFT_END
 * - LOGIN
 * - LOGOUT
 * - DRIVER_CARD_INSERTED
 * - DRIVER_CARD_REMOVED
 * - UNKNOWN
 * 
 * ##### Work shift hours for all of the work types are calculated as follows
 * 
 * ###### PAID_WORK
 * Everything else apart from work event type BREAK.
 * 
 * ###### BREAK
 * Only work event type BREAK.
 * 
 * ###### STANDBY
 * Not calculated at all. It can only be added manually from the management.
 * 
 * ###### EVENING_ALLOWANCE
 * All hours from the PAID_WORK that are recorded between 18.00 and 20.00.
 * 
 * ###### NIGHT_ALLOWANCE
 * All hours from the PAID_WORK that are recorded between 20.00 and 06.00.
 * 
 * ###### HOLIDAY_ALLOWANCE
 * All hours from the PAID_WORK that are recorded during one of the following
 * - Sunday
 * - Public holiday
 *   - a corresponding date is found from holidays table with type PUBLIC_HOLIDAY_ALLOWANCE
 * - Day off work
 *   - either
 *     - a corresponding date is found from holidays table with type DAY_OFF_WORK_ALLOWANCE, or
 *     - any of the shifts, which started during the day, is marked as dayOffWorkAllowance
 * 
 * ###### JOB_SPECIFIC_ALLOWANCE
 * Not calculated at all. It can only be added manually from the management.
 * 
 * ###### FROZEN_ALLOWANCE
 * All hours from the PAID_WORK that are recorded from the frozen section.
 * 
 * ###### OFFICIAL_DUTIES
 * Not calculated at all. It can only be added manually from the management.
 * 
 * ###### SICK_LEAVE
 * Not calculated at all. It can only be added manually from the management.
 * 
 * ###### TRAINING
 * Not calculated at all. It can only be added manually from the management.
 * 
 * ###### UNPAID
 * Not calculated at all. It can only be added manually from the management.
 * 
 * @export
 * @interface WorkShiftHours
 */
export interface WorkShiftHours {
    /**
     * 
     * @type {string}
     * @memberof WorkShiftHours
     */
    readonly id?: string;
    /**
     * Employee's ID
     * @type {string}
     * @memberof WorkShiftHours
     */
    employeeId: string;
    /**
     * Employee work shift's ID
     * @type {string}
     * @memberof WorkShiftHours
     */
    employeeWorkShiftId: string;
    /**
     * 
     * @type {WorkType}
     * @memberof WorkShiftHours
     */
    workType: WorkType;
    /**
     * Calculated hours for the employee work shift for corresponding work type. This should always be dynamically
     * calculated from the actual work events in the work shift. Cannot be updated.
     * 
     * @type {number}
     * @memberof WorkShiftHours
     */
    readonly calculatedHours?: number;
    /**
     * Actual, manually recorded hours for the employee work shift for corresponding work type. It is null until
     * the hours are manually set.
     * 
     * @type {number}
     * @memberof WorkShiftHours
     */
    actualHours?: number;
}

/**
 * Check if a given object implements the WorkShiftHours interface.
 */
export function instanceOfWorkShiftHours(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "employeeId" in value;
    isInstance = isInstance && "employeeWorkShiftId" in value;
    isInstance = isInstance && "workType" in value;

    return isInstance;
}

export function WorkShiftHoursFromJSON(json: any): WorkShiftHours {
    return WorkShiftHoursFromJSONTyped(json, false);
}

export function WorkShiftHoursFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkShiftHours {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'employeeId': json['employeeId'],
        'employeeWorkShiftId': json['employeeWorkShiftId'],
        'workType': WorkTypeFromJSON(json['workType']),
        'calculatedHours': !exists(json, 'calculatedHours') ? undefined : json['calculatedHours'],
        'actualHours': !exists(json, 'actualHours') ? undefined : json['actualHours'],
    };
}

export function WorkShiftHoursToJSON(value?: WorkShiftHours | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'employeeId': value.employeeId,
        'employeeWorkShiftId': value.employeeWorkShiftId,
        'workType': WorkTypeToJSON(value.workType),
        'actualHours': value.actualHours,
    };
}

