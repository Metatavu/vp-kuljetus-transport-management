/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Represent single truck
 * @export
 * @interface Truck
 */
export interface Truck {
    /**
     * 
     * @type {string}
     * @memberof Truck
     */
    readonly id?: string;
    /**
     * 
     * @type {string}
     * @memberof Truck
     */
    plateNumber: string;
    /**
     * 
     * @type {string}
     * @memberof Truck
     */
    type: TruckTypeEnum;
    /**
     * Truck identification number. This is unique for each truck and should be used as a hardware identifier for this specific truck
     * @type {string}
     * @memberof Truck
     */
    vin: string;
    /**
     * 
     * @type {string}
     * @memberof Truck
     */
    readonly creatorId?: string;
    /**
     * 
     * @type {Date}
     * @memberof Truck
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Truck
     */
    readonly lastModifierId?: string;
    /**
     * 
     * @type {Date}
     * @memberof Truck
     */
    readonly modifiedAt?: Date;
    /**
     * Setting the archivedAt time marks the truck as archived. Trucks marked as archived will not appear in list requests unless archived filter is set to true. Archived truck cannot be updated, unless archivedAt is first set to null.
     * 
     * @type {Date}
     * @memberof Truck
     */
    archivedAt?: Date;
}


/**
 * @export
 */
export const TruckTypeEnum = {
    Truck: 'TRUCK',
    SemiTruck: 'SEMI_TRUCK'
} as const;
export type TruckTypeEnum = typeof TruckTypeEnum[keyof typeof TruckTypeEnum];


/**
 * Check if a given object implements the Truck interface.
 */
export function instanceOfTruck(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "plateNumber" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "vin" in value;

    return isInstance;
}

export function TruckFromJSON(json: any): Truck {
    return TruckFromJSONTyped(json, false);
}

export function TruckFromJSONTyped(json: any, ignoreDiscriminator: boolean): Truck {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'plateNumber': json['plateNumber'],
        'type': json['type'],
        'vin': json['vin'],
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
        'archivedAt': !exists(json, 'archivedAt') ? undefined : (new Date(json['archivedAt'])),
    };
}

export function TruckToJSON(value?: Truck | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'plateNumber': value.plateNumber,
        'type': value.type,
        'vin': value.vin,
        'archivedAt': value.archivedAt === undefined ? undefined : (value.archivedAt.toISOString()),
    };
}

