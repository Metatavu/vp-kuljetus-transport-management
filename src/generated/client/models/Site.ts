/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Represents a single customer site
 * @export
 * @interface Site
 */
export interface Site {
    /**
     * 
     * @type {string}
     * @memberof Site
     */
    readonly id?: string;
    /**
     * Site name
     * @type {string}
     * @memberof Site
     */
    name: string;
    /**
     * Site location as well-known text Point
     * @type {string}
     * @memberof Site
     */
    location: string;
    /**
     * 
     * @type {string}
     * @memberof Site
     */
    readonly creatorId?: string;
    /**
     * 
     * @type {Date}
     * @memberof Site
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Site
     */
    readonly lastModifierId?: string;
    /**
     * 
     * @type {Date}
     * @memberof Site
     */
    readonly modifiedAt?: Date;
    /**
     * Setting the archivedAt time marks the site as archived. Sites marked as archived will not appear in list requests unless archived filter is set to true. Archived site cannot be updated, unless archivedAt is first set to null.
     * 
     * @type {Date}
     * @memberof Site
     */
    archivedAt?: Date;
}

/**
 * Check if a given object implements the Site interface.
 */
export function instanceOfSite(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "location" in value;

    return isInstance;
}

export function SiteFromJSON(json: any): Site {
    return SiteFromJSONTyped(json, false);
}

export function SiteFromJSONTyped(json: any, ignoreDiscriminator: boolean): Site {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': json['name'],
        'location': json['location'],
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
        'archivedAt': !exists(json, 'archivedAt') ? undefined : (new Date(json['archivedAt'])),
    };
}

export function SiteToJSON(value?: Site | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'location': value.location,
        'archivedAt': value.archivedAt === undefined ? undefined : (value.archivedAt.toISOString()),
    };
}

