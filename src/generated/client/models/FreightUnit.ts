/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Represents a single freight unit in a freight shipment.
 * @export
 * @interface FreightUnit
 */
export interface FreightUnit {
    /**
     * 
     * @type {string}
     * @memberof FreightUnit
     */
    readonly id?: string;
    /**
     * Id of the freight shipment
     * @type {string}
     * @memberof FreightUnit
     */
    freightId: string;
    /**
     * Type of the unit
     * @type {string}
     * @memberof FreightUnit
     */
    type: string;
    /**
     * Quantity of the unit
     * @type {string}
     * @memberof FreightUnit
     */
    quantity: string;
    /**
     * Quantity unit of the unit
     * @type {string}
     * @memberof FreightUnit
     */
    quantityUnit: string;
    /**
     * Reservations for the unit
     * @type {string}
     * @memberof FreightUnit
     */
    reservations?: string;
    /**
     * 
     * @type {string}
     * @memberof FreightUnit
     */
    readonly creatorId?: string;
    /**
     * 
     * @type {Date}
     * @memberof FreightUnit
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof FreightUnit
     */
    readonly lastModifierId?: string;
    /**
     * 
     * @type {Date}
     * @memberof FreightUnit
     */
    readonly modifiedAt?: Date;
}

/**
 * Check if a given object implements the FreightUnit interface.
 */
export function instanceOfFreightUnit(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "freightId" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "quantity" in value;
    isInstance = isInstance && "quantityUnit" in value;

    return isInstance;
}

export function FreightUnitFromJSON(json: any): FreightUnit {
    return FreightUnitFromJSONTyped(json, false);
}

export function FreightUnitFromJSONTyped(json: any, ignoreDiscriminator: boolean): FreightUnit {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'freightId': json['freightId'],
        'type': json['type'],
        'quantity': json['quantity'],
        'quantityUnit': json['quantityUnit'],
        'reservations': !exists(json, 'reservations') ? undefined : json['reservations'],
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
    };
}

export function FreightUnitToJSON(value?: FreightUnit | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'freightId': value.freightId,
        'type': value.type,
        'quantity': value.quantity,
        'quantityUnit': value.quantityUnit,
        'reservations': value.reservations,
    };
}

