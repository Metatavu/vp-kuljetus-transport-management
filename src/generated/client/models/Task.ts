/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TaskStatus } from './TaskStatus';
import {
    TaskStatusFromJSON,
    TaskStatusFromJSONTyped,
    TaskStatusToJSON,
} from './TaskStatus';
import type { TaskType } from './TaskType';
import {
    TaskTypeFromJSON,
    TaskTypeFromJSONTyped,
    TaskTypeToJSON,
} from './TaskType';

/**
 * Represent single task for freight
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    readonly id?: string;
    /**
     * Freight id
     * @type {string}
     * @memberof Task
     */
    freightId: string;
    /**
     * Customer site id
     * @type {string}
     * @memberof Task
     */
    customerSiteId: string;
    /**
     * 
     * @type {TaskType}
     * @memberof Task
     */
    type: TaskType;
    /**
     * Group number of the task. Gets a value of 0 by default. Can be updated from the management UI. All tasks with the same freightId, customerSiteId, type and group number are shown as grouped together in the driver app.
     * 
     * @type {number}
     * @memberof Task
     */
    groupNumber: number;
    /**
     * 
     * @type {TaskStatus}
     * @memberof Task
     */
    status: TaskStatus;
    /**
     * Task remarks
     * @type {string}
     * @memberof Task
     */
    remarks?: string;
    /**
     * Route id
     * @type {string}
     * @memberof Task
     */
    routeId?: string;
    /**
     * Time the task was started at. Filled when task status is changed from TODO to IN_PROGRESS.
     * 
     * @type {Date}
     * @memberof Task
     */
    readonly startedAt?: Date;
    /**
     * Time the task was finished at. Filled when task status is changed from IN_PROGRESS to DONE.
     * 
     * @type {Date}
     * @memberof Task
     */
    readonly finishedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    readonly creatorId?: string;
    /**
     * 
     * @type {Date}
     * @memberof Task
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    readonly lastModifierId?: string;
    /**
     * 
     * @type {Date}
     * @memberof Task
     */
    readonly modifiedAt?: Date;
}

/**
 * Check if a given object implements the Task interface.
 */
export function instanceOfTask(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "freightId" in value;
    isInstance = isInstance && "customerSiteId" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "groupNumber" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function TaskFromJSON(json: any): Task {
    return TaskFromJSONTyped(json, false);
}

export function TaskFromJSONTyped(json: any, ignoreDiscriminator: boolean): Task {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'freightId': json['freightId'],
        'customerSiteId': json['customerSiteId'],
        'type': TaskTypeFromJSON(json['type']),
        'groupNumber': json['groupNumber'],
        'status': TaskStatusFromJSON(json['status']),
        'remarks': !exists(json, 'remarks') ? undefined : json['remarks'],
        'routeId': !exists(json, 'routeId') ? undefined : json['routeId'],
        'startedAt': !exists(json, 'startedAt') ? undefined : (new Date(json['startedAt'])),
        'finishedAt': !exists(json, 'finishedAt') ? undefined : (new Date(json['finishedAt'])),
        'creatorId': !exists(json, 'creatorId') ? undefined : json['creatorId'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
        'lastModifierId': !exists(json, 'lastModifierId') ? undefined : json['lastModifierId'],
        'modifiedAt': !exists(json, 'modifiedAt') ? undefined : (new Date(json['modifiedAt'])),
    };
}

export function TaskToJSON(value?: Task | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'freightId': value.freightId,
        'customerSiteId': value.customerSiteId,
        'type': TaskTypeToJSON(value.type),
        'groupNumber': value.groupNumber,
        'status': TaskStatusToJSON(value.status),
        'remarks': value.remarks,
        'routeId': value.routeId,
    };
}

