/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EmployeeType } from './EmployeeType';
import {
    EmployeeTypeFromJSON,
    EmployeeTypeFromJSONTyped,
    EmployeeTypeToJSON,
} from './EmployeeType';
import type { Office } from './Office';
import {
    OfficeFromJSON,
    OfficeFromJSONTyped,
    OfficeToJSON,
} from './Office';
import type { SalaryGroup } from './SalaryGroup';
import {
    SalaryGroupFromJSON,
    SalaryGroupFromJSONTyped,
    SalaryGroupToJSON,
} from './SalaryGroup';

/**
 * Represents single employee
 * @export
 * @interface Employee
 */
export interface Employee {
    /**
     * 
     * @type {string}
     * @memberof Employee
     */
    readonly id?: string;
    /**
     * Employee's first name
     * @type {string}
     * @memberof Employee
     */
    firstName: string;
    /**
     * Employee's last name
     * @type {string}
     * @memberof Employee
     */
    lastName: string;
    /**
     * Employee's driver card ID.
     * @type {string}
     * @memberof Employee
     */
    driverCardId?: string;
    /**
     * 
     * @type {EmployeeType}
     * @memberof Employee
     */
    type: EmployeeType;
    /**
     * 
     * @type {SalaryGroup}
     * @memberof Employee
     */
    salaryGroup: SalaryGroup;
    /**
     * 
     * @type {Office}
     * @memberof Employee
     */
    office: Office;
    /**
     * Employee's regular working hours per two weeks. Used for employee's whose salary group is either Driver or VPLogistics.
     * 
     * @type {number}
     * @memberof Employee
     */
    regularWorkingHours?: number;
    /**
     * Last time the driver card was read out. In the beginning this should be set manually but later probably automated.
     * 
     * @type {Date}
     * @memberof Employee
     */
    driverCardLastReadOut?: Date;
    /**
     * Employee's number. Should be unique.
     * @type {string}
     * @memberof Employee
     */
    employeeNumber: string;
    /**
     * Setting the archivedAt time marks the employee as archived. Employees marked as archived will not appear in list requests unless archived filter is set to true. Archived employee cannot be updated, unless archivedAt is first set to null.
     * 
     * @type {Date}
     * @memberof Employee
     */
    archivedAt?: Date;
}

/**
 * Check if a given object implements the Employee interface.
 */
export function instanceOfEmployee(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "firstName" in value;
    isInstance = isInstance && "lastName" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "salaryGroup" in value;
    isInstance = isInstance && "office" in value;
    isInstance = isInstance && "employeeNumber" in value;

    return isInstance;
}

export function EmployeeFromJSON(json: any): Employee {
    return EmployeeFromJSONTyped(json, false);
}

export function EmployeeFromJSONTyped(json: any, ignoreDiscriminator: boolean): Employee {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'firstName': json['firstName'],
        'lastName': json['lastName'],
        'driverCardId': !exists(json, 'driverCardId') ? undefined : json['driverCardId'],
        'type': EmployeeTypeFromJSON(json['type']),
        'salaryGroup': SalaryGroupFromJSON(json['salaryGroup']),
        'office': OfficeFromJSON(json['office']),
        'regularWorkingHours': !exists(json, 'regularWorkingHours') ? undefined : json['regularWorkingHours'],
        'driverCardLastReadOut': !exists(json, 'driverCardLastReadOut') ? undefined : (new Date(json['driverCardLastReadOut'])),
        'employeeNumber': json['employeeNumber'],
        'archivedAt': !exists(json, 'archivedAt') ? undefined : (new Date(json['archivedAt'])),
    };
}

export function EmployeeToJSON(value?: Employee | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'firstName': value.firstName,
        'lastName': value.lastName,
        'driverCardId': value.driverCardId,
        'type': EmployeeTypeToJSON(value.type),
        'salaryGroup': SalaryGroupToJSON(value.salaryGroup),
        'office': OfficeToJSON(value.office),
        'regularWorkingHours': value.regularWorkingHours,
        'driverCardLastReadOut': value.driverCardLastReadOut === undefined ? undefined : (value.driverCardLastReadOut.toISOString()),
        'employeeNumber': value.employeeNumber,
        'archivedAt': value.archivedAt === undefined ? undefined : (value.archivedAt.toISOString()),
    };
}

