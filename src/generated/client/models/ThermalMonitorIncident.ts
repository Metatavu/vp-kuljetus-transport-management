/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ThermalMonitorIncidentPagedPolicy } from './ThermalMonitorIncidentPagedPolicy';
import {
    ThermalMonitorIncidentPagedPolicyFromJSON,
    ThermalMonitorIncidentPagedPolicyFromJSONTyped,
    ThermalMonitorIncidentPagedPolicyToJSON,
} from './ThermalMonitorIncidentPagedPolicy';
import type { ThermalMonitorIncidentStatus } from './ThermalMonitorIncidentStatus';
import {
    ThermalMonitorIncidentStatusFromJSON,
    ThermalMonitorIncidentStatusFromJSONTyped,
    ThermalMonitorIncidentStatusToJSON,
} from './ThermalMonitorIncidentStatus';

/**
 * Represents an incident triggered by a thermal monitor
 * @export
 * @interface ThermalMonitorIncident
 */
export interface ThermalMonitorIncident {
    /**
     * 
     * @type {string}
     * @memberof ThermalMonitorIncident
     */
    readonly id?: string;
    /**
     * The ID of the monitor that triggered the incident
     * @type {string}
     * @memberof ThermalMonitorIncident
     */
    monitorId?: string;
    /**
     * The ID of the thermometer that triggered the incident
     * @type {string}
     * @memberof ThermalMonitorIncident
     */
    thermometerId?: string;
    /**
     * The temperature that triggered the incident
     * @type {number}
     * @memberof ThermalMonitorIncident
     */
    temperature?: number;
    /**
     * The time when the incident was triggered
     * @type {Date}
     * @memberof ThermalMonitorIncident
     */
    timestamp?: Date;
    /**
     * The time when the incident was acknowledged
     * @type {Date}
     * @memberof ThermalMonitorIncident
     */
    acknowledgeAt?: Date;
    /**
     * The time when the incident was resolved
     * @type {Date}
     * @memberof ThermalMonitorIncident
     */
    resolvedAt?: Date;
    /**
     * Person that acknowledged this incident
     * @type {string}
     * @memberof ThermalMonitorIncident
     */
    acknowledgedBy?: string;
    /**
     * Person that resolved this incident
     * @type {string}
     * @memberof ThermalMonitorIncident
     */
    resolvedBy?: string;
    /**
     * 
     * @type {Array<ThermalMonitorIncidentPagedPolicy>}
     * @memberof ThermalMonitorIncident
     */
    pagedPolicies?: Array<ThermalMonitorIncidentPagedPolicy>;
    /**
     * 
     * @type {ThermalMonitorIncidentStatus}
     * @memberof ThermalMonitorIncident
     */
    status?: ThermalMonitorIncidentStatus;
}

/**
 * Check if a given object implements the ThermalMonitorIncident interface.
 */
export function instanceOfThermalMonitorIncident(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ThermalMonitorIncidentFromJSON(json: any): ThermalMonitorIncident {
    return ThermalMonitorIncidentFromJSONTyped(json, false);
}

export function ThermalMonitorIncidentFromJSONTyped(json: any, ignoreDiscriminator: boolean): ThermalMonitorIncident {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'monitorId': !exists(json, 'monitorId') ? undefined : json['monitorId'],
        'thermometerId': !exists(json, 'thermometerId') ? undefined : json['thermometerId'],
        'temperature': !exists(json, 'temperature') ? undefined : json['temperature'],
        'timestamp': !exists(json, 'timestamp') ? undefined : (new Date(json['timestamp'])),
        'acknowledgeAt': !exists(json, 'acknowledgeAt') ? undefined : (new Date(json['acknowledgeAt'])),
        'resolvedAt': !exists(json, 'resolvedAt') ? undefined : (new Date(json['resolvedAt'])),
        'acknowledgedBy': !exists(json, 'acknowledgedBy') ? undefined : json['acknowledgedBy'],
        'resolvedBy': !exists(json, 'resolvedBy') ? undefined : json['resolvedBy'],
        'pagedPolicies': !exists(json, 'pagedPolicies') ? undefined : ((json['pagedPolicies'] as Array<any>).map(ThermalMonitorIncidentPagedPolicyFromJSON)),
        'status': !exists(json, 'status') ? undefined : ThermalMonitorIncidentStatusFromJSON(json['status']),
    };
}

export function ThermalMonitorIncidentToJSON(value?: ThermalMonitorIncident | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'monitorId': value.monitorId,
        'thermometerId': value.thermometerId,
        'temperature': value.temperature,
        'timestamp': value.timestamp === undefined ? undefined : (value.timestamp.toISOString()),
        'acknowledgeAt': value.acknowledgeAt === undefined ? undefined : (value.acknowledgeAt.toISOString()),
        'resolvedAt': value.resolvedAt === undefined ? undefined : (value.resolvedAt.toISOString()),
        'acknowledgedBy': value.acknowledgedBy,
        'resolvedBy': value.resolvedBy,
        'pagedPolicies': value.pagedPolicies === undefined ? undefined : ((value.pagedPolicies as Array<any>).map(ThermalMonitorIncidentPagedPolicyToJSON)),
        'status': ThermalMonitorIncidentStatusToJSON(value.status),
    };
}

