/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { WorkShiftChangeReason } from './WorkShiftChangeReason';
import {
    WorkShiftChangeReasonFromJSON,
    WorkShiftChangeReasonFromJSONTyped,
    WorkShiftChangeReasonToJSON,
} from './WorkShiftChangeReason';

/**
 * Represents a single change entry within a work shift change set.
 * @export
 * @interface WorkShiftChange
 */
export interface WorkShiftChange {
    /**
     * 
     * @type {WorkShiftChangeReason}
     * @memberof WorkShiftChange
     */
    reason?: WorkShiftChangeReason;
    /**
     * Work shift ID
     * @type {string}
     * @memberof WorkShiftChange
     */
    readonly workShiftId?: string;
    /**
     * Possible work shift hour ID
     * @type {string}
     * @memberof WorkShiftChange
     */
    readonly workShiftHourId?: string;
    /**
     * Possible work event ID
     * @type {string}
     * @memberof WorkShiftChange
     */
    readonly workEventId?: string;
    /**
     * Possible old value. When reason is 'create', this is null.
     * @type {string}
     * @memberof WorkShiftChange
     */
    readonly oldValue?: string;
    /**
     * New value.
     * @type {string}
     * @memberof WorkShiftChange
     */
    readonly newValue?: string;
    /**
     * Creation time
     * @type {Date}
     * @memberof WorkShiftChange
     */
    readonly createdAt?: Date;
}

/**
 * Check if a given object implements the WorkShiftChange interface.
 */
export function instanceOfWorkShiftChange(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function WorkShiftChangeFromJSON(json: any): WorkShiftChange {
    return WorkShiftChangeFromJSONTyped(json, false);
}

export function WorkShiftChangeFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkShiftChange {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'reason': !exists(json, 'reason') ? undefined : WorkShiftChangeReasonFromJSON(json['reason']),
        'workShiftId': !exists(json, 'workShiftId') ? undefined : json['workShiftId'],
        'workShiftHourId': !exists(json, 'workShiftHourId') ? undefined : json['workShiftHourId'],
        'workEventId': !exists(json, 'workEventId') ? undefined : json['workEventId'],
        'oldValue': !exists(json, 'oldValue') ? undefined : json['oldValue'],
        'newValue': !exists(json, 'newValue') ? undefined : json['newValue'],
        'createdAt': !exists(json, 'createdAt') ? undefined : (new Date(json['createdAt'])),
    };
}

export function WorkShiftChangeToJSON(value?: WorkShiftChange | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'reason': WorkShiftChangeReasonToJSON(value.reason),
    };
}

