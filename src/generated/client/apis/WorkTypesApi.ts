/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    WorkType,
    WorkTypeFromJSON,
    WorkTypeToJSON,
    WorkTypeCategory,
    WorkTypeCategoryFromJSON,
    WorkTypeCategoryToJSON,
} from '../models';

export interface CreateWorkTypeRequest {
    workType: WorkType;
}

export interface DeleteWorkTypeRequest {
    workTypeId: string;
}

export interface FindWorkTypeRequest {
    workTypeId: string;
}

export interface ListWorkTypesRequest {
    category?: WorkTypeCategory;
}

/**
 * 
 */
export class WorkTypesApi extends runtime.BaseAPI {
    /**
     * Creates Work Type.
     * Create Work Type.
     */
    async createWorkTypeRaw(requestParameters: CreateWorkTypeRequest): Promise<runtime.ApiResponse<WorkType>> {
        if (requestParameters.workType === null || requestParameters.workType === undefined) {
            throw new runtime.RequiredError('workType','Required parameter requestParameters.workType was null or undefined when calling createWorkType.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user-management/v1/workTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: WorkTypeToJSON(requestParameters.workType),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => WorkTypeFromJSON(jsonValue));
    }
    /**
     * Creates Work Type.
     * Create Work Type.
     */
    async createWorkType(requestParameters: CreateWorkTypeRequest): Promise<WorkType> {
        const response = await this.createWorkTypeRaw(requestParameters);
        return await response.value();
    }
    /**
     * Creates Work Type.
     * Create Work Type.
     */
    async createWorkTypeWithHeaders(requestParameters: CreateWorkTypeRequest): Promise<[ WorkType, Headers ]> {
        const response = await this.createWorkTypeRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Deletes Work Type.
     * Delete Work Type.
     */
    async deleteWorkTypeRaw(requestParameters: DeleteWorkTypeRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.workTypeId === null || requestParameters.workTypeId === undefined) {
            throw new runtime.RequiredError('workTypeId','Required parameter requestParameters.workTypeId was null or undefined when calling deleteWorkType.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user-management/v1/workTypes/{workTypeId}`.replace(`{${"workTypeId"}}`, encodeURIComponent(String(requestParameters.workTypeId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Deletes Work Type.
     * Delete Work Type.
     */
    async deleteWorkType(requestParameters: DeleteWorkTypeRequest): Promise<void> {
        await this.deleteWorkTypeRaw(requestParameters);
    }
    /**
     * Deletes Work Type.
     * Delete Work Type.
     */
    async deleteWorkTypeWithHeaders(requestParameters: DeleteWorkTypeRequest): Promise<Headers> {
        const response = await this.deleteWorkTypeRaw(requestParameters);
        return response.raw.headers;
    }
    /**
     * Finds a work type by id.
     * Find a work type.
     */
    async findWorkTypeRaw(requestParameters: FindWorkTypeRequest): Promise<runtime.ApiResponse<WorkType>> {
        if (requestParameters.workTypeId === null || requestParameters.workTypeId === undefined) {
            throw new runtime.RequiredError('workTypeId','Required parameter requestParameters.workTypeId was null or undefined when calling findWorkType.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user-management/v1/workTypes/{workTypeId}`.replace(`{${"workTypeId"}}`, encodeURIComponent(String(requestParameters.workTypeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => WorkTypeFromJSON(jsonValue));
    }
    /**
     * Finds a work type by id.
     * Find a work type.
     */
    async findWorkType(requestParameters: FindWorkTypeRequest): Promise<WorkType> {
        const response = await this.findWorkTypeRaw(requestParameters);
        return await response.value();
    }
    /**
     * Finds a work type by id.
     * Find a work type.
     */
    async findWorkTypeWithHeaders(requestParameters: FindWorkTypeRequest): Promise<[ WorkType, Headers ]> {
        const response = await this.findWorkTypeRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Lists Work Types.
     * List Work Types.
     */
    async listWorkTypesRaw(requestParameters: ListWorkTypesRequest): Promise<runtime.ApiResponse<Array<WorkType>>> {
        const queryParameters: any = {};
        if (requestParameters.category !== undefined) {
            queryParameters['category'] = requestParameters.category;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager", "driver", "employee"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user-management/v1/workTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkTypeFromJSON));
    }
    /**
     * Lists Work Types.
     * List Work Types.
     */
    async listWorkTypes(requestParameters: ListWorkTypesRequest = {}): Promise<Array<WorkType>> {
        const response = await this.listWorkTypesRaw(requestParameters);
        return await response.value();
    }
    /**
     * Lists Work Types.
     * List Work Types.
     */
    async listWorkTypesWithHeaders(requestParameters: ListWorkTypesRequest): Promise<[ Array<WorkType>, Headers ]> {
        const response = await this.listWorkTypesRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
}
