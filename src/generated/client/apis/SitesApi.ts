/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Site,
    SiteFromJSON,
    SiteToJSON,
} from '../models';

export interface CreateSiteRequest {
    site: Site;
}

export interface FindSiteRequest {
    siteId: string;
}

export interface ListSitesRequest {
    archived?: boolean;
    first?: number;
    max?: number;
}

export interface UpdateSiteRequest {
    site: Site;
    siteId: string;
}

/**
 * 
 */
export class SitesApi extends runtime.BaseAPI {
    /**
     * Create new site
     * Create site
     */
    async createSiteRaw(requestParameters: CreateSiteRequest): Promise<runtime.ApiResponse<Site>> {
        if (requestParameters.site === null || requestParameters.site === undefined) {
            throw new runtime.RequiredError('site','Required parameter requestParameters.site was null or undefined when calling createSite.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/delivery-info/v1/sites`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SiteToJSON(requestParameters.site),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => SiteFromJSON(jsonValue));
    }
    /**
     * Create new site
     * Create site
     */
    async createSite(requestParameters: CreateSiteRequest): Promise<Site> {
        const response = await this.createSiteRaw(requestParameters);
        return await response.value();
    }
    /**
     * Create new site
     * Create site
     */
    async createSiteWithHeaders(requestParameters: CreateSiteRequest): Promise<[ Site, Headers ]> {
        const response = await this.createSiteRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Finds a site by id.
     * Find a site.
     */
    async findSiteRaw(requestParameters: FindSiteRequest): Promise<runtime.ApiResponse<Site>> {
        if (requestParameters.siteId === null || requestParameters.siteId === undefined) {
            throw new runtime.RequiredError('siteId','Required parameter requestParameters.siteId was null or undefined when calling findSite.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["driver", "manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/delivery-info/v1/sites/{siteId}`.replace(`{${"siteId"}}`, encodeURIComponent(String(requestParameters.siteId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => SiteFromJSON(jsonValue));
    }
    /**
     * Finds a site by id.
     * Find a site.
     */
    async findSite(requestParameters: FindSiteRequest): Promise<Site> {
        const response = await this.findSiteRaw(requestParameters);
        return await response.value();
    }
    /**
     * Finds a site by id.
     * Find a site.
     */
    async findSiteWithHeaders(requestParameters: FindSiteRequest): Promise<[ Site, Headers ]> {
        const response = await this.findSiteRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Lists Sites.
     * List Sites.
     */
    async listSitesRaw(requestParameters: ListSitesRequest): Promise<runtime.ApiResponse<Array<Site>>> {
        const queryParameters: any = {};
        if (requestParameters.archived !== undefined) {
            queryParameters['archived'] = requestParameters.archived;
        }
        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }
        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["driver", "manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/delivery-info/v1/sites`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SiteFromJSON));
    }
    /**
     * Lists Sites.
     * List Sites.
     */
    async listSites(requestParameters: ListSitesRequest = {}): Promise<Array<Site>> {
        const response = await this.listSitesRaw(requestParameters);
        return await response.value();
    }
    /**
     * Lists Sites.
     * List Sites.
     */
    async listSitesWithHeaders(requestParameters: ListSitesRequest): Promise<[ Array<Site>, Headers ]> {
        const response = await this.listSitesRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Updates single site
     * Updates site
     */
    async updateSiteRaw(requestParameters: UpdateSiteRequest): Promise<runtime.ApiResponse<Site>> {
        if (requestParameters.site === null || requestParameters.site === undefined) {
            throw new runtime.RequiredError('site','Required parameter requestParameters.site was null or undefined when calling updateSite.');
        }
        if (requestParameters.siteId === null || requestParameters.siteId === undefined) {
            throw new runtime.RequiredError('siteId','Required parameter requestParameters.siteId was null or undefined when calling updateSite.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/delivery-info/v1/sites/{siteId}`.replace(`{${"siteId"}}`, encodeURIComponent(String(requestParameters.siteId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SiteToJSON(requestParameters.site),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => SiteFromJSON(jsonValue));
    }
    /**
     * Updates single site
     * Updates site
     */
    async updateSite(requestParameters: UpdateSiteRequest): Promise<Site> {
        const response = await this.updateSiteRaw(requestParameters);
        return await response.value();
    }
    /**
     * Updates single site
     * Updates site
     */
    async updateSiteWithHeaders(requestParameters: UpdateSiteRequest): Promise<[ Site, Headers ]> {
        const response = await this.updateSiteRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
}
