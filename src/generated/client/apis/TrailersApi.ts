/* tslint:disable */
/* eslint-disable */
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Trailer,
    TrailerFromJSON,
    TrailerToJSON,
} from '../models';

export interface CreateTrailerRequest {
    trailer: Trailer;
}

export interface DeleteTrailerRequest {
    trailerId: string;
}

export interface FindTrailerRequest {
    trailerId: string;
}

export interface ListTrailersRequest {
    plateNumber?: string;
    first?: number;
    max?: number;
}

export interface UpdateTrailerRequest {
    trailer: Trailer;
    trailerId: string;
}

/**
 * 
 */
export class TrailersApi extends runtime.BaseAPI {

    /**
     * Create new trailer
     * Create trailer
     */
    async createTrailerRaw(requestParameters: CreateTrailerRequest): Promise<runtime.ApiResponse<Trailer>> {
        if (requestParameters.trailer === null || requestParameters.trailer === undefined) {
            throw new runtime.RequiredError('trailer','Required parameter requestParameters.trailer was null or undefined when calling createTrailer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/vehicle-management/v1/trailers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TrailerToJSON(requestParameters.trailer),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrailerFromJSON(jsonValue));
    }

    /**
     * Create new trailer
     * Create trailer
     */
    async createTrailer(requestParameters: CreateTrailerRequest): Promise<Trailer> {
        const response = await this.createTrailerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create new trailer
     * Create trailer
     */
    async createTrailerWithHeaders(requestParameters: CreateTrailerRequest): Promise<[ Trailer, Headers ]> {
        const response = await this.createTrailerRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Deletes trailer
     * Deletes trailer
     */
    async deleteTrailerRaw(requestParameters: DeleteTrailerRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.trailerId === null || requestParameters.trailerId === undefined) {
            throw new runtime.RequiredError('trailerId','Required parameter requestParameters.trailerId was null or undefined when calling deleteTrailer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/vehicle-management/v1/trailers/{trailerId}`.replace(`{${"trailerId"}}`, encodeURIComponent(String(requestParameters.trailerId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes trailer
     * Deletes trailer
     */
    async deleteTrailer(requestParameters: DeleteTrailerRequest): Promise<void> {
        await this.deleteTrailerRaw(requestParameters);
    }

    /**
     * Deletes trailer
     * Deletes trailer
     */
    async deleteTrailerWithHeaders(requestParameters: DeleteTrailerRequest): Promise<Headers> {
        const response = await this.deleteTrailerRaw(requestParameters);
        return response.raw.headers;
    }

    /**
     * Finds a trailer by id.
     * Find a trailer.
     */
    async findTrailerRaw(requestParameters: FindTrailerRequest): Promise<runtime.ApiResponse<Trailer>> {
        if (requestParameters.trailerId === null || requestParameters.trailerId === undefined) {
            throw new runtime.RequiredError('trailerId','Required parameter requestParameters.trailerId was null or undefined when calling findTrailer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/vehicle-management/v1/trailers/{trailerId}`.replace(`{${"trailerId"}}`, encodeURIComponent(String(requestParameters.trailerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrailerFromJSON(jsonValue));
    }

    /**
     * Finds a trailer by id.
     * Find a trailer.
     */
    async findTrailer(requestParameters: FindTrailerRequest): Promise<Trailer> {
        const response = await this.findTrailerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Finds a trailer by id.
     * Find a trailer.
     */
    async findTrailerWithHeaders(requestParameters: FindTrailerRequest): Promise<[ Trailer, Headers ]> {
        const response = await this.findTrailerRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Lists Trailers.
     * List Trailers.
     */
    async listTrailersRaw(requestParameters: ListTrailersRequest): Promise<runtime.ApiResponse<Array<Trailer>>> {
        const queryParameters: any = {};

        if (requestParameters.plateNumber !== undefined) {
            queryParameters['plateNumber'] = requestParameters.plateNumber;
        }

        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }

        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/vehicle-management/v1/trailers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrailerFromJSON));
    }

    /**
     * Lists Trailers.
     * List Trailers.
     */
    async listTrailers(requestParameters: ListTrailersRequest = {}): Promise<Array<Trailer>> {
        const response = await this.listTrailersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists Trailers.
     * List Trailers.
     */
    async listTrailersWithHeaders(requestParameters: ListTrailersRequest): Promise<[ Array<Trailer>, Headers ]> {
        const response = await this.listTrailersRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Updates single trailer
     * Updates trailers
     */
    async updateTrailerRaw(requestParameters: UpdateTrailerRequest): Promise<runtime.ApiResponse<Trailer>> {
        if (requestParameters.trailer === null || requestParameters.trailer === undefined) {
            throw new runtime.RequiredError('trailer','Required parameter requestParameters.trailer was null or undefined when calling updateTrailer.');
        }

        if (requestParameters.trailerId === null || requestParameters.trailerId === undefined) {
            throw new runtime.RequiredError('trailerId','Required parameter requestParameters.trailerId was null or undefined when calling updateTrailer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/vehicle-management/v1/trailers/{trailerId}`.replace(`{${"trailerId"}}`, encodeURIComponent(String(requestParameters.trailerId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TrailerToJSON(requestParameters.trailer),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrailerFromJSON(jsonValue));
    }

    /**
     * Updates single trailer
     * Updates trailers
     */
    async updateTrailer(requestParameters: UpdateTrailerRequest): Promise<Trailer> {
        const response = await this.updateTrailerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates single trailer
     * Updates trailers
     */
    async updateTrailerWithHeaders(requestParameters: UpdateTrailerRequest): Promise<[ Trailer, Headers ]> {
        const response = await this.updateTrailerRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

}
