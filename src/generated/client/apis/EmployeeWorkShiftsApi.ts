/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
    EmployeeWorkShift,
    EmployeeWorkShiftFromJSON,
    EmployeeWorkShiftToJSON,
} from '../models';
import { DateTime } from "luxon";
export interface CreateEmployeeWorkShiftRequest {
    employeeWorkShift: EmployeeWorkShift;
    employeeId: string;
}
export interface DeleteEmployeeWorkShiftRequest {
    employeeId: string;
    workShiftId: string;
}
export interface FindEmployeeWorkShiftRequest {
    employeeId: string;
    workShiftId: string;
}
export interface ListEmployeeWorkShiftsRequest {
    employeeId: string;
    startedAfter?: Date;
    startedBefore?: Date;
    dateAfter?: Date;
    dateBefore?: Date;
    first?: number;
    max?: number;
}
export interface UpdateEmployeeWorkShiftRequest {
    employeeWorkShift: EmployeeWorkShift;
    employeeId: string;
    workShiftId: string;
}
/**
 * 
 */
export class EmployeeWorkShiftsApi extends runtime.BaseAPI {
    /**
     * Creates Employee Work Shift.
     * Create Employee Work Shift.
     */
    async createEmployeeWorkShiftRaw(requestParameters: CreateEmployeeWorkShiftRequest): Promise<runtime.ApiResponse<EmployeeWorkShift>> {
        if (requestParameters.employeeWorkShift === null || requestParameters.employeeWorkShift === undefined) {
            throw new runtime.RequiredError('employeeWorkShift','Required parameter requestParameters.employeeWorkShift was null or undefined when calling createEmployeeWorkShift.');
        }
        if (requestParameters.employeeId === null || requestParameters.employeeId === undefined) {
            throw new runtime.RequiredError('employeeId','Required parameter requestParameters.employeeId was null or undefined when calling createEmployeeWorkShift.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user-management/v1/employees/{employeeId}/workShifts`.replace(`{${"employeeId"}}`, encodeURIComponent(String(requestParameters.employeeId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmployeeWorkShiftToJSON(requestParameters.employeeWorkShift),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeWorkShiftFromJSON(jsonValue));
    }
    /**
     * Creates Employee Work Shift.
     * Create Employee Work Shift.
     */
    async createEmployeeWorkShift(requestParameters: CreateEmployeeWorkShiftRequest): Promise<EmployeeWorkShift> {
        const response = await this.createEmployeeWorkShiftRaw(requestParameters);
        return await response.value();
    }
    /**
     * Creates Employee Work Shift.
     * Create Employee Work Shift.
     */
    async createEmployeeWorkShiftWithHeaders(requestParameters: CreateEmployeeWorkShiftRequest): Promise<[ EmployeeWorkShift, Headers ]> {
        const response = await this.createEmployeeWorkShiftRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Only for tests.
     * Delete employee work shift.
     */
    async deleteEmployeeWorkShiftRaw(requestParameters: DeleteEmployeeWorkShiftRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.employeeId === null || requestParameters.employeeId === undefined) {
            throw new runtime.RequiredError('employeeId','Required parameter requestParameters.employeeId was null or undefined when calling deleteEmployeeWorkShift.');
        }
        if (requestParameters.workShiftId === null || requestParameters.workShiftId === undefined) {
            throw new runtime.RequiredError('workShiftId','Required parameter requestParameters.workShiftId was null or undefined when calling deleteEmployeeWorkShift.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user-management/v1/employees/{employeeId}/workShifts/{workShiftId}`.replace(`{${"employeeId"}}`, encodeURIComponent(String(requestParameters.employeeId))).replace(`{${"workShiftId"}}`, encodeURIComponent(String(requestParameters.workShiftId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Only for tests.
     * Delete employee work shift.
     */
    async deleteEmployeeWorkShift(requestParameters: DeleteEmployeeWorkShiftRequest): Promise<void> {
        await this.deleteEmployeeWorkShiftRaw(requestParameters);
    }
    /**
     * Only for tests.
     * Delete employee work shift.
     */
    async deleteEmployeeWorkShiftWithHeaders(requestParameters: DeleteEmployeeWorkShiftRequest): Promise<Headers> {
        const response = await this.deleteEmployeeWorkShiftRaw(requestParameters);
        return response.raw.headers;
    }
    /**
     * Finds an employee\'s work shift by ID.
     * Find Employee Work Shift.
     */
    async findEmployeeWorkShiftRaw(requestParameters: FindEmployeeWorkShiftRequest): Promise<runtime.ApiResponse<EmployeeWorkShift>> {
        if (requestParameters.employeeId === null || requestParameters.employeeId === undefined) {
            throw new runtime.RequiredError('employeeId','Required parameter requestParameters.employeeId was null or undefined when calling findEmployeeWorkShift.');
        }
        if (requestParameters.workShiftId === null || requestParameters.workShiftId === undefined) {
            throw new runtime.RequiredError('workShiftId','Required parameter requestParameters.workShiftId was null or undefined when calling findEmployeeWorkShift.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user-management/v1/employees/{employeeId}/workShifts/{workShiftId}`.replace(`{${"employeeId"}}`, encodeURIComponent(String(requestParameters.employeeId))).replace(`{${"workShiftId"}}`, encodeURIComponent(String(requestParameters.workShiftId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeWorkShiftFromJSON(jsonValue));
    }
    /**
     * Finds an employee\'s work shift by ID.
     * Find Employee Work Shift.
     */
    async findEmployeeWorkShift(requestParameters: FindEmployeeWorkShiftRequest): Promise<EmployeeWorkShift> {
        const response = await this.findEmployeeWorkShiftRaw(requestParameters);
        return await response.value();
    }
    /**
     * Finds an employee\'s work shift by ID.
     * Find Employee Work Shift.
     */
    async findEmployeeWorkShiftWithHeaders(requestParameters: FindEmployeeWorkShiftRequest): Promise<[ EmployeeWorkShift, Headers ]> {
        const response = await this.findEmployeeWorkShiftRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Lists Employees work Shifts. Sort by time, latest first.  Employees can only see their own work shifts. Managers can see all employees\' work shifts. 
     * List Employees Work Shifts.
     */
    async listEmployeeWorkShiftsRaw(requestParameters: ListEmployeeWorkShiftsRequest): Promise<runtime.ApiResponse<Array<EmployeeWorkShift>>> {
        if (requestParameters.employeeId === null || requestParameters.employeeId === undefined) {
            throw new runtime.RequiredError('employeeId','Required parameter requestParameters.employeeId was null or undefined when calling listEmployeeWorkShifts.');
        }
        const queryParameters: any = {};
        if (requestParameters.startedAfter !== undefined) {
            queryParameters['startedAfter'] = DateTime.fromJSDate(requestParameters.startedAfter as any).toISO();
        }
        if (requestParameters.startedBefore !== undefined) {
            queryParameters['startedBefore'] = DateTime.fromJSDate(requestParameters.startedBefore as any).toISO();
        }
        if (requestParameters.dateAfter !== undefined) {
            queryParameters['dateAfter'] = DateTime.fromJSDate(requestParameters.dateAfter as any).toISODate();
        }
        if (requestParameters.dateBefore !== undefined) {
            queryParameters['dateBefore'] = DateTime.fromJSDate(requestParameters.dateBefore as any).toISODate();
        }
        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }
        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager", "employee"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user-management/v1/employees/{employeeId}/workShifts`.replace(`{${"employeeId"}}`, encodeURIComponent(String(requestParameters.employeeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmployeeWorkShiftFromJSON));
    }
    /**
     * Lists Employees work Shifts. Sort by time, latest first.  Employees can only see their own work shifts. Managers can see all employees\' work shifts. 
     * List Employees Work Shifts.
     */
    async listEmployeeWorkShifts(requestParameters: ListEmployeeWorkShiftsRequest): Promise<Array<EmployeeWorkShift>> {
        const response = await this.listEmployeeWorkShiftsRaw(requestParameters);
        return await response.value();
    }
    /**
     * Lists Employees work Shifts. Sort by time, latest first.  Employees can only see their own work shifts. Managers can see all employees\' work shifts. 
     * List Employees Work Shifts.
     */
    async listEmployeeWorkShiftsWithHeaders(requestParameters: ListEmployeeWorkShiftsRequest): Promise<[ Array<EmployeeWorkShift>, Headers ]> {
        const response = await this.listEmployeeWorkShiftsRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Updates Employee Work Shift. Only approved field can be updated.
     * Update Employee Work Shift.
     */
    async updateEmployeeWorkShiftRaw(requestParameters: UpdateEmployeeWorkShiftRequest): Promise<runtime.ApiResponse<EmployeeWorkShift>> {
        if (requestParameters.employeeWorkShift === null || requestParameters.employeeWorkShift === undefined) {
            throw new runtime.RequiredError('employeeWorkShift','Required parameter requestParameters.employeeWorkShift was null or undefined when calling updateEmployeeWorkShift.');
        }
        if (requestParameters.employeeId === null || requestParameters.employeeId === undefined) {
            throw new runtime.RequiredError('employeeId','Required parameter requestParameters.employeeId was null or undefined when calling updateEmployeeWorkShift.');
        }
        if (requestParameters.workShiftId === null || requestParameters.workShiftId === undefined) {
            throw new runtime.RequiredError('workShiftId','Required parameter requestParameters.workShiftId was null or undefined when calling updateEmployeeWorkShift.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user-management/v1/employees/{employeeId}/workShifts/{workShiftId}`.replace(`{${"employeeId"}}`, encodeURIComponent(String(requestParameters.employeeId))).replace(`{${"workShiftId"}}`, encodeURIComponent(String(requestParameters.workShiftId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmployeeWorkShiftToJSON(requestParameters.employeeWorkShift),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeWorkShiftFromJSON(jsonValue));
    }
    /**
     * Updates Employee Work Shift. Only approved field can be updated.
     * Update Employee Work Shift.
     */
    async updateEmployeeWorkShift(requestParameters: UpdateEmployeeWorkShiftRequest): Promise<EmployeeWorkShift> {
        const response = await this.updateEmployeeWorkShiftRaw(requestParameters);
        return await response.value();
    }
    /**
     * Updates Employee Work Shift. Only approved field can be updated.
     * Update Employee Work Shift.
     */
    async updateEmployeeWorkShiftWithHeaders(requestParameters: UpdateEmployeeWorkShiftRequest): Promise<[ EmployeeWorkShift, Headers ]> {
        const response = await this.updateEmployeeWorkShiftRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
}
