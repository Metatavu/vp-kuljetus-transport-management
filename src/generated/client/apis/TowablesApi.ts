/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
    Temperature,
    TemperatureFromJSON,
    TemperatureToJSON,
    Towable,
    TowableFromJSON,
    TowableToJSON,
} from '../models';
import { DateTime } from "luxon";
export interface CreateTowableRequest {
    towable: Towable;
}
export interface FindTowableRequest {
    towableId: string;
}
export interface ListTowableTemperaturesRequest {
    towableId: string;
    includeArchived?: boolean;
    first?: number;
    max?: number;
}
export interface ListTowablesRequest {
    plateNumber?: string;
    archived?: boolean;
    first?: number;
    max?: number;
}
export interface UpdateTowableRequest {
    towable: Towable;
    towableId: string;
}
/**
 * 
 */
export class TowablesApi extends runtime.BaseAPI {
    /**
     * Create new towable
     * Create towable
     */
    async createTowableRaw(requestParameters: CreateTowableRequest): Promise<runtime.ApiResponse<Towable>> {
        if (requestParameters.towable === null || requestParameters.towable === undefined) {
            throw new runtime.RequiredError('towable','Required parameter requestParameters.towable was null or undefined when calling createTowable.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/vehicle-management/v1/towables`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TowableToJSON(requestParameters.towable),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => TowableFromJSON(jsonValue));
    }
    /**
     * Create new towable
     * Create towable
     */
    async createTowable(requestParameters: CreateTowableRequest): Promise<Towable> {
        const response = await this.createTowableRaw(requestParameters);
        return await response.value();
    }
    /**
     * Create new towable
     * Create towable
     */
    async createTowableWithHeaders(requestParameters: CreateTowableRequest): Promise<[ Towable, Headers ]> {
        const response = await this.createTowableRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Finds a towable by id.
     * Find a towable.
     */
    async findTowableRaw(requestParameters: FindTowableRequest): Promise<runtime.ApiResponse<Towable>> {
        if (requestParameters.towableId === null || requestParameters.towableId === undefined) {
            throw new runtime.RequiredError('towableId','Required parameter requestParameters.towableId was null or undefined when calling findTowable.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["driver", "manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/vehicle-management/v1/towables/{towableId}`.replace(`{${"towableId"}}`, encodeURIComponent(String(requestParameters.towableId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => TowableFromJSON(jsonValue));
    }
    /**
     * Finds a towable by id.
     * Find a towable.
     */
    async findTowable(requestParameters: FindTowableRequest): Promise<Towable> {
        const response = await this.findTowableRaw(requestParameters);
        return await response.value();
    }
    /**
     * Finds a towable by id.
     * Find a towable.
     */
    async findTowableWithHeaders(requestParameters: FindTowableRequest): Promise<[ Towable, Headers ]> {
        const response = await this.findTowableRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Retrieve all temperatures from all thermometers related to a specific towable, possibly including data from thermometers that have been archived.
     * List temperature readings by towable, including archived thermometers
     */
    async listTowableTemperaturesRaw(requestParameters: ListTowableTemperaturesRequest): Promise<runtime.ApiResponse<Array<Temperature>>> {
        if (requestParameters.towableId === null || requestParameters.towableId === undefined) {
            throw new runtime.RequiredError('towableId','Required parameter requestParameters.towableId was null or undefined when calling listTowableTemperatures.');
        }
        const queryParameters: any = {};
        if (requestParameters.includeArchived !== undefined) {
            queryParameters['includeArchived'] = requestParameters.includeArchived;
        }
        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }
        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/vehicle-management/v1/towables/{towableId}/temperatures`.replace(`{${"towableId"}}`, encodeURIComponent(String(requestParameters.towableId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TemperatureFromJSON));
    }
    /**
     * Retrieve all temperatures from all thermometers related to a specific towable, possibly including data from thermometers that have been archived.
     * List temperature readings by towable, including archived thermometers
     */
    async listTowableTemperatures(requestParameters: ListTowableTemperaturesRequest): Promise<Array<Temperature>> {
        const response = await this.listTowableTemperaturesRaw(requestParameters);
        return await response.value();
    }
    /**
     * Retrieve all temperatures from all thermometers related to a specific towable, possibly including data from thermometers that have been archived.
     * List temperature readings by towable, including archived thermometers
     */
    async listTowableTemperaturesWithHeaders(requestParameters: ListTowableTemperaturesRequest): Promise<[ Array<Temperature>, Headers ]> {
        const response = await this.listTowableTemperaturesRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Lists Towables.
     * List Towables.
     */
    async listTowablesRaw(requestParameters: ListTowablesRequest): Promise<runtime.ApiResponse<Array<Towable>>> {
        const queryParameters: any = {};
        if (requestParameters.plateNumber !== undefined) {
            queryParameters['plateNumber'] = requestParameters.plateNumber;
        }
        if (requestParameters.archived !== undefined) {
            queryParameters['archived'] = requestParameters.archived;
        }
        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }
        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["driver", "manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/vehicle-management/v1/towables`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TowableFromJSON));
    }
    /**
     * Lists Towables.
     * List Towables.
     */
    async listTowables(requestParameters: ListTowablesRequest = {}): Promise<Array<Towable>> {
        const response = await this.listTowablesRaw(requestParameters);
        return await response.value();
    }
    /**
     * Lists Towables.
     * List Towables.
     */
    async listTowablesWithHeaders(requestParameters: ListTowablesRequest): Promise<[ Array<Towable>, Headers ]> {
        const response = await this.listTowablesRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Updates single towable
     * Updates towables
     */
    async updateTowableRaw(requestParameters: UpdateTowableRequest): Promise<runtime.ApiResponse<Towable>> {
        if (requestParameters.towable === null || requestParameters.towable === undefined) {
            throw new runtime.RequiredError('towable','Required parameter requestParameters.towable was null or undefined when calling updateTowable.');
        }
        if (requestParameters.towableId === null || requestParameters.towableId === undefined) {
            throw new runtime.RequiredError('towableId','Required parameter requestParameters.towableId was null or undefined when calling updateTowable.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/vehicle-management/v1/towables/{towableId}`.replace(`{${"towableId"}}`, encodeURIComponent(String(requestParameters.towableId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TowableToJSON(requestParameters.towable),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => TowableFromJSON(jsonValue));
    }
    /**
     * Updates single towable
     * Updates towables
     */
    async updateTowable(requestParameters: UpdateTowableRequest): Promise<Towable> {
        const response = await this.updateTowableRaw(requestParameters);
        return await response.value();
    }
    /**
     * Updates single towable
     * Updates towables
     */
    async updateTowableWithHeaders(requestParameters: UpdateTowableRequest): Promise<[ Towable, Headers ]> {
        const response = await this.updateTowableRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
}
