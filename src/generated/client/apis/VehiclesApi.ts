/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Vehicle,
    VehicleFromJSON,
    VehicleToJSON,
} from '../models';

export interface CreateVehicleRequest {
    vehicle: Vehicle;
}

export interface DeleteVehicleRequest {
    vehicleId: string;
}

export interface FindVehicleRequest {
    vehicleId: string;
}

export interface ListVehiclesRequest {
    truckId?: string;
    first?: number;
    max?: number;
}

export interface UpdateVehicleRequest {
    vehicle: Vehicle;
    vehicleId: string;
}

/**
 * 
 */
export class VehiclesApi extends runtime.BaseAPI {

    /**
     * Create new vehicle
     * Create vehicle
     */
    async createVehicleRaw(requestParameters: CreateVehicleRequest): Promise<runtime.ApiResponse<Vehicle>> {
        if (requestParameters.vehicle === null || requestParameters.vehicle === undefined) {
            throw new runtime.RequiredError('vehicle','Required parameter requestParameters.vehicle was null or undefined when calling createVehicle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/vehicle-management/v1/vehicles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VehicleToJSON(requestParameters.vehicle),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VehicleFromJSON(jsonValue));
    }

    /**
     * Create new vehicle
     * Create vehicle
     */
    async createVehicle(requestParameters: CreateVehicleRequest): Promise<Vehicle> {
        const response = await this.createVehicleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create new vehicle
     * Create vehicle
     */
    async createVehicleWithHeaders(requestParameters: CreateVehicleRequest): Promise<[ Vehicle, Headers ]> {
        const response = await this.createVehicleRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Deletes vehicle
     * Deletes vehicle
     */
    async deleteVehicleRaw(requestParameters: DeleteVehicleRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.vehicleId === null || requestParameters.vehicleId === undefined) {
            throw new runtime.RequiredError('vehicleId','Required parameter requestParameters.vehicleId was null or undefined when calling deleteVehicle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/vehicle-management/v1/vehicles/{vehicleId}`.replace(`{${"vehicleId"}}`, encodeURIComponent(String(requestParameters.vehicleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes vehicle
     * Deletes vehicle
     */
    async deleteVehicle(requestParameters: DeleteVehicleRequest): Promise<void> {
        await this.deleteVehicleRaw(requestParameters);
    }

    /**
     * Deletes vehicle
     * Deletes vehicle
     */
    async deleteVehicleWithHeaders(requestParameters: DeleteVehicleRequest): Promise<Headers> {
        const response = await this.deleteVehicleRaw(requestParameters);
        return response.raw.headers;
    }

    /**
     * Finds a vehicle by id.
     * Find a vehicle.
     */
    async findVehicleRaw(requestParameters: FindVehicleRequest): Promise<runtime.ApiResponse<Vehicle>> {
        if (requestParameters.vehicleId === null || requestParameters.vehicleId === undefined) {
            throw new runtime.RequiredError('vehicleId','Required parameter requestParameters.vehicleId was null or undefined when calling findVehicle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/vehicle-management/v1/vehicles/{vehicleId}`.replace(`{${"vehicleId"}}`, encodeURIComponent(String(requestParameters.vehicleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VehicleFromJSON(jsonValue));
    }

    /**
     * Finds a vehicle by id.
     * Find a vehicle.
     */
    async findVehicle(requestParameters: FindVehicleRequest): Promise<Vehicle> {
        const response = await this.findVehicleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Finds a vehicle by id.
     * Find a vehicle.
     */
    async findVehicleWithHeaders(requestParameters: FindVehicleRequest): Promise<[ Vehicle, Headers ]> {
        const response = await this.findVehicleRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Lists Vehicles.
     * List Vehicles.
     */
    async listVehiclesRaw(requestParameters: ListVehiclesRequest): Promise<runtime.ApiResponse<Array<Vehicle>>> {
        const queryParameters: any = {};

        if (requestParameters.truckId !== undefined) {
            queryParameters['truckId'] = requestParameters.truckId;
        }

        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }

        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/vehicle-management/v1/vehicles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VehicleFromJSON));
    }

    /**
     * Lists Vehicles.
     * List Vehicles.
     */
    async listVehicles(requestParameters: ListVehiclesRequest = {}): Promise<Array<Vehicle>> {
        const response = await this.listVehiclesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists Vehicles.
     * List Vehicles.
     */
    async listVehiclesWithHeaders(requestParameters: ListVehiclesRequest): Promise<[ Array<Vehicle>, Headers ]> {
        const response = await this.listVehiclesRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Updates single vehicle
     * Updates vehicles
     */
    async updateVehicleRaw(requestParameters: UpdateVehicleRequest): Promise<runtime.ApiResponse<Vehicle>> {
        if (requestParameters.vehicle === null || requestParameters.vehicle === undefined) {
            throw new runtime.RequiredError('vehicle','Required parameter requestParameters.vehicle was null or undefined when calling updateVehicle.');
        }

        if (requestParameters.vehicleId === null || requestParameters.vehicleId === undefined) {
            throw new runtime.RequiredError('vehicleId','Required parameter requestParameters.vehicleId was null or undefined when calling updateVehicle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/vehicle-management/v1/vehicles/{vehicleId}`.replace(`{${"vehicleId"}}`, encodeURIComponent(String(requestParameters.vehicleId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: VehicleToJSON(requestParameters.vehicle),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VehicleFromJSON(jsonValue));
    }

    /**
     * Updates single vehicle
     * Updates vehicles
     */
    async updateVehicle(requestParameters: UpdateVehicleRequest): Promise<Vehicle> {
        const response = await this.updateVehicleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates single vehicle
     * Updates vehicles
     */
    async updateVehicleWithHeaders(requestParameters: UpdateVehicleRequest): Promise<[ Vehicle, Headers ]> {
        const response = await this.updateVehicleRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

}
