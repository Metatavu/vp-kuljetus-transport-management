/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
    Driver,
    DriverFromJSON,
    DriverToJSON,
} from '../models';
import { DateTime } from "luxon";
export interface FindDriverRequest {
    driverId: string;
}
export interface ListDriversRequest {
    driverCardId?: string;
    archived?: boolean;
    first?: number;
    max?: number;
}
/**
 * 
 */
export class DriversApi extends runtime.BaseAPI {
    /**
     * Finds a driver by ID.
     * Find a driver.
     */
    async findDriverRaw(requestParameters: FindDriverRequest): Promise<runtime.ApiResponse<Driver>> {
        if (requestParameters.driverId === null || requestParameters.driverId === undefined) {
            throw new runtime.RequiredError('driverId','Required parameter requestParameters.driverId was null or undefined when calling findDriver.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["driver", "manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user-management/v1/drivers/{driverId}`.replace(`{${"driverId"}}`, encodeURIComponent(String(requestParameters.driverId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => DriverFromJSON(jsonValue));
    }
    /**
     * Finds a driver by ID.
     * Find a driver.
     */
    async findDriver(requestParameters: FindDriverRequest): Promise<Driver> {
        const response = await this.findDriverRaw(requestParameters);
        return await response.value();
    }
    /**
     * Finds a driver by ID.
     * Find a driver.
     */
    async findDriverWithHeaders(requestParameters: FindDriverRequest): Promise<[ Driver, Headers ]> {
        const response = await this.findDriverRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Lists Drivers.
     * List Drivers.
     */
    async listDriversRaw(requestParameters: ListDriversRequest): Promise<runtime.ApiResponse<Array<Driver>>> {
        const queryParameters: any = {};
        if (requestParameters.driverCardId !== undefined) {
            queryParameters['driverCardId'] = requestParameters.driverCardId;
        }
        if (requestParameters.archived !== undefined) {
            queryParameters['archived'] = requestParameters.archived;
        }
        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }
        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager", "integrations"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user-management/v1/drivers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DriverFromJSON));
    }
    /**
     * Lists Drivers.
     * List Drivers.
     */
    async listDrivers(requestParameters: ListDriversRequest = {}): Promise<Array<Driver>> {
        const response = await this.listDriversRaw(requestParameters);
        return await response.value();
    }
    /**
     * Lists Drivers.
     * List Drivers.
     */
    async listDriversWithHeaders(requestParameters: ListDriversRequest): Promise<[ Array<Driver>, Headers ]> {
        const response = await this.listDriversRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
}
