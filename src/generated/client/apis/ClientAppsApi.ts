/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ClientApp,
    ClientAppFromJSON,
    ClientAppToJSON,
    ClientAppStatus,
    ClientAppStatusFromJSON,
    ClientAppStatusToJSON,
} from '../models';

export interface CreateClientAppRequest {
    clientApp: ClientApp;
}

export interface DeleteClientAppRequest {
    clientAppId: string;
}

export interface FindClientAppRequest {
    clientAppId: string;
}

export interface ListClientAppsRequest {
    status?: ClientAppStatus;
    first?: number;
    max?: number;
}

export interface UpdateClientAppRequest {
    clientApp: ClientApp;
    clientAppId: string;
}

/**
 * 
 */
export class ClientAppsApi extends runtime.BaseAPI {
    /**
     * Creates a client app.  Client app can only be created in the status \'WAITING_FOR_APPROVAL\'. If the client app with the same deviceId already exists with status other than \'WAITING_FOR_APPROVAL\', the creation fails with conflict. Otherwise, the existing client app is returned with OK response. 
     * Create a client app.
     */
    async createClientAppRaw(requestParameters: CreateClientAppRequest): Promise<runtime.ApiResponse<ClientApp>> {
        if (requestParameters.clientApp === null || requestParameters.clientApp === undefined) {
            throw new runtime.RequiredError('clientApp','Required parameter requestParameters.clientApp was null or undefined when calling createClientApp.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/user-management/v1/clientApps`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClientAppToJSON(requestParameters.clientApp),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ClientAppFromJSON(jsonValue));
    }
    /**
     * Creates a client app.  Client app can only be created in the status \'WAITING_FOR_APPROVAL\'. If the client app with the same deviceId already exists with status other than \'WAITING_FOR_APPROVAL\', the creation fails with conflict. Otherwise, the existing client app is returned with OK response. 
     * Create a client app.
     */
    async createClientApp(requestParameters: CreateClientAppRequest): Promise<ClientApp> {
        const response = await this.createClientAppRaw(requestParameters);
        return await response.value();
    }
    /**
     * Creates a client app.  Client app can only be created in the status \'WAITING_FOR_APPROVAL\'. If the client app with the same deviceId already exists with status other than \'WAITING_FOR_APPROVAL\', the creation fails with conflict. Otherwise, the existing client app is returned with OK response. 
     * Create a client app.
     */
    async createClientAppWithHeaders(requestParameters: CreateClientAppRequest): Promise<[ ClientApp, Headers ]> {
        const response = await this.createClientAppRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Deletes client app.
     * Delete client app.
     */
    async deleteClientAppRaw(requestParameters: DeleteClientAppRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.clientAppId === null || requestParameters.clientAppId === undefined) {
            throw new runtime.RequiredError('clientAppId','Required parameter requestParameters.clientAppId was null or undefined when calling deleteClientApp.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user-management/v1/clientApps/{clientAppId}`.replace(`{${"clientAppId"}}`, encodeURIComponent(String(requestParameters.clientAppId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Deletes client app.
     * Delete client app.
     */
    async deleteClientApp(requestParameters: DeleteClientAppRequest): Promise<void> {
        await this.deleteClientAppRaw(requestParameters);
    }
    /**
     * Deletes client app.
     * Delete client app.
     */
    async deleteClientAppWithHeaders(requestParameters: DeleteClientAppRequest): Promise<Headers> {
        const response = await this.deleteClientAppRaw(requestParameters);
        return response.raw.headers;
    }
    /**
     * Finds a client app by ID.
     * Find a client app.
     */
    async findClientAppRaw(requestParameters: FindClientAppRequest): Promise<runtime.ApiResponse<ClientApp>> {
        if (requestParameters.clientAppId === null || requestParameters.clientAppId === undefined) {
            throw new runtime.RequiredError('clientAppId','Required parameter requestParameters.clientAppId was null or undefined when calling findClientApp.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user-management/v1/clientApps/{clientAppId}`.replace(`{${"clientAppId"}}`, encodeURIComponent(String(requestParameters.clientAppId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ClientAppFromJSON(jsonValue));
    }
    /**
     * Finds a client app by ID.
     * Find a client app.
     */
    async findClientApp(requestParameters: FindClientAppRequest): Promise<ClientApp> {
        const response = await this.findClientAppRaw(requestParameters);
        return await response.value();
    }
    /**
     * Finds a client app by ID.
     * Find a client app.
     */
    async findClientAppWithHeaders(requestParameters: FindClientAppRequest): Promise<[ ClientApp, Headers ]> {
        const response = await this.findClientAppRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Lists client apps.
     * List client apps.
     */
    async listClientAppsRaw(requestParameters: ListClientAppsRequest): Promise<runtime.ApiResponse<Array<ClientApp>>> {
        const queryParameters: any = {};
        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }
        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }
        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user-management/v1/clientApps`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ClientAppFromJSON));
    }
    /**
     * Lists client apps.
     * List client apps.
     */
    async listClientApps(requestParameters: ListClientAppsRequest = {}): Promise<Array<ClientApp>> {
        const response = await this.listClientAppsRaw(requestParameters);
        return await response.value();
    }
    /**
     * Lists client apps.
     * List client apps.
     */
    async listClientAppsWithHeaders(requestParameters: ListClientAppsRequest): Promise<[ Array<ClientApp>, Headers ]> {
        const response = await this.listClientAppsRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Updates a client app.
     * Update a client app.
     */
    async updateClientAppRaw(requestParameters: UpdateClientAppRequest): Promise<runtime.ApiResponse<ClientApp>> {
        if (requestParameters.clientApp === null || requestParameters.clientApp === undefined) {
            throw new runtime.RequiredError('clientApp','Required parameter requestParameters.clientApp was null or undefined when calling updateClientApp.');
        }
        if (requestParameters.clientAppId === null || requestParameters.clientAppId === undefined) {
            throw new runtime.RequiredError('clientAppId','Required parameter requestParameters.clientAppId was null or undefined when calling updateClientApp.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user-management/v1/clientApps/{clientAppId}`.replace(`{${"clientAppId"}}`, encodeURIComponent(String(requestParameters.clientAppId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ClientAppToJSON(requestParameters.clientApp),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ClientAppFromJSON(jsonValue));
    }
    /**
     * Updates a client app.
     * Update a client app.
     */
    async updateClientApp(requestParameters: UpdateClientAppRequest): Promise<ClientApp> {
        const response = await this.updateClientAppRaw(requestParameters);
        return await response.value();
    }
    /**
     * Updates a client app.
     * Update a client app.
     */
    async updateClientAppWithHeaders(requestParameters: UpdateClientAppRequest): Promise<[ ClientApp, Headers ]> {
        const response = await this.updateClientAppRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
}
