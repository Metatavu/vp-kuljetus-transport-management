/* tslint:disable */
/* eslint-disable */
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Route,
    RouteFromJSON,
    RouteToJSON,
    Trailer,
    TrailerFromJSON,
    TrailerToJSON,
    Truck,
    TruckFromJSON,
    TruckToJSON,
    Vehicle,
    VehicleFromJSON,
    VehicleToJSON,
} from '../models';

export interface FindRouteRequest {
    routeId: string;
}

export interface FindTrailerRequest {
    trailerId: string;
}

export interface FindTruckRequest {
    truckId: string;
}

export interface FindVehicleRequest {
    vehicleId: string;
}

export interface ListRoutesRequest {
    vehicleId?: string;
    driverId?: string;
    first?: number;
    max?: number;
}

export interface ListTrailersRequest {
    plateNumber?: string;
    first?: number;
    max?: number;
}

export interface ListTrucksRequest {
    plateNumber?: string;
    first?: number;
    max?: number;
}

export interface ListVehiclesRequest {
    truckId?: string;
    first?: number;
    max?: number;
}

/**
 * 
 */
export class SpecAppApi extends runtime.BaseAPI {

    /**
     * Finds a route by id.
     * Find a route.
     */
    async findRouteRaw(requestParameters: FindRouteRequest): Promise<runtime.ApiResponse<Route>> {
        if (requestParameters.routeId === null || requestParameters.routeId === undefined) {
            throw new runtime.RequiredError('routeId','Required parameter requestParameters.routeId was null or undefined when calling findRoute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/work-planning/v1/routes/{routeId}`.replace(`{${"routeId"}}`, encodeURIComponent(String(requestParameters.routeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RouteFromJSON(jsonValue));
    }

    /**
     * Finds a route by id.
     * Find a route.
     */
    async findRoute(requestParameters: FindRouteRequest): Promise<Route> {
        const response = await this.findRouteRaw(requestParameters);
        return await response.value();
    }

    /**
     * Finds a route by id.
     * Find a route.
     */
    async findRouteWithHeaders(requestParameters: FindRouteRequest): Promise<[ Route, Headers ]> {
        const response = await this.findRouteRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Finds a trailer by id.
     * Find a trailer.
     */
    async findTrailerRaw(requestParameters: FindTrailerRequest): Promise<runtime.ApiResponse<Trailer>> {
        if (requestParameters.trailerId === null || requestParameters.trailerId === undefined) {
            throw new runtime.RequiredError('trailerId','Required parameter requestParameters.trailerId was null or undefined when calling findTrailer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/vehicle-management/v1/trailers/{trailerId}`.replace(`{${"trailerId"}}`, encodeURIComponent(String(requestParameters.trailerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrailerFromJSON(jsonValue));
    }

    /**
     * Finds a trailer by id.
     * Find a trailer.
     */
    async findTrailer(requestParameters: FindTrailerRequest): Promise<Trailer> {
        const response = await this.findTrailerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Finds a trailer by id.
     * Find a trailer.
     */
    async findTrailerWithHeaders(requestParameters: FindTrailerRequest): Promise<[ Trailer, Headers ]> {
        const response = await this.findTrailerRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Finds a truck by id.
     * Find a truck.
     */
    async findTruckRaw(requestParameters: FindTruckRequest): Promise<runtime.ApiResponse<Truck>> {
        if (requestParameters.truckId === null || requestParameters.truckId === undefined) {
            throw new runtime.RequiredError('truckId','Required parameter requestParameters.truckId was null or undefined when calling findTruck.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/vehicle-management/v1/trucks/{truckId}`.replace(`{${"truckId"}}`, encodeURIComponent(String(requestParameters.truckId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TruckFromJSON(jsonValue));
    }

    /**
     * Finds a truck by id.
     * Find a truck.
     */
    async findTruck(requestParameters: FindTruckRequest): Promise<Truck> {
        const response = await this.findTruckRaw(requestParameters);
        return await response.value();
    }

    /**
     * Finds a truck by id.
     * Find a truck.
     */
    async findTruckWithHeaders(requestParameters: FindTruckRequest): Promise<[ Truck, Headers ]> {
        const response = await this.findTruckRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Finds a vehicle by id.
     * Find a vehicle.
     */
    async findVehicleRaw(requestParameters: FindVehicleRequest): Promise<runtime.ApiResponse<Vehicle>> {
        if (requestParameters.vehicleId === null || requestParameters.vehicleId === undefined) {
            throw new runtime.RequiredError('vehicleId','Required parameter requestParameters.vehicleId was null or undefined when calling findVehicle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/vehicle-management/v1/vehicles/{vehicleId}`.replace(`{${"vehicleId"}}`, encodeURIComponent(String(requestParameters.vehicleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VehicleFromJSON(jsonValue));
    }

    /**
     * Finds a vehicle by id.
     * Find a vehicle.
     */
    async findVehicle(requestParameters: FindVehicleRequest): Promise<Vehicle> {
        const response = await this.findVehicleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Finds a vehicle by id.
     * Find a vehicle.
     */
    async findVehicleWithHeaders(requestParameters: FindVehicleRequest): Promise<[ Vehicle, Headers ]> {
        const response = await this.findVehicleRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Lists Routes.
     * List Routes.
     */
    async listRoutesRaw(requestParameters: ListRoutesRequest): Promise<runtime.ApiResponse<Array<Route>>> {
        const queryParameters: any = {};

        if (requestParameters.vehicleId !== undefined) {
            queryParameters['vehicleId'] = requestParameters.vehicleId;
        }

        if (requestParameters.driverId !== undefined) {
            queryParameters['driverId'] = requestParameters.driverId;
        }

        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }

        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/work-planning/v1/routes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(RouteFromJSON));
    }

    /**
     * Lists Routes.
     * List Routes.
     */
    async listRoutes(requestParameters: ListRoutesRequest = {}): Promise<Array<Route>> {
        const response = await this.listRoutesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists Routes.
     * List Routes.
     */
    async listRoutesWithHeaders(requestParameters: ListRoutesRequest): Promise<[ Array<Route>, Headers ]> {
        const response = await this.listRoutesRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Lists Trailers.
     * List Trailers.
     */
    async listTrailersRaw(requestParameters: ListTrailersRequest): Promise<runtime.ApiResponse<Array<Trailer>>> {
        const queryParameters: any = {};

        if (requestParameters.plateNumber !== undefined) {
            queryParameters['plateNumber'] = requestParameters.plateNumber;
        }

        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }

        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/vehicle-management/v1/trailers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrailerFromJSON));
    }

    /**
     * Lists Trailers.
     * List Trailers.
     */
    async listTrailers(requestParameters: ListTrailersRequest = {}): Promise<Array<Trailer>> {
        const response = await this.listTrailersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists Trailers.
     * List Trailers.
     */
    async listTrailersWithHeaders(requestParameters: ListTrailersRequest): Promise<[ Array<Trailer>, Headers ]> {
        const response = await this.listTrailersRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Lists Trucks.
     * List Trucks.
     */
    async listTrucksRaw(requestParameters: ListTrucksRequest): Promise<runtime.ApiResponse<Array<Truck>>> {
        const queryParameters: any = {};

        if (requestParameters.plateNumber !== undefined) {
            queryParameters['plateNumber'] = requestParameters.plateNumber;
        }

        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }

        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/vehicle-management/v1/trucks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TruckFromJSON));
    }

    /**
     * Lists Trucks.
     * List Trucks.
     */
    async listTrucks(requestParameters: ListTrucksRequest = {}): Promise<Array<Truck>> {
        const response = await this.listTrucksRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists Trucks.
     * List Trucks.
     */
    async listTrucksWithHeaders(requestParameters: ListTrucksRequest): Promise<[ Array<Truck>, Headers ]> {
        const response = await this.listTrucksRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

    /**
     * Lists Vehicles.
     * List Vehicles.
     */
    async listVehiclesRaw(requestParameters: ListVehiclesRequest): Promise<runtime.ApiResponse<Array<Vehicle>>> {
        const queryParameters: any = {};

        if (requestParameters.truckId !== undefined) {
            queryParameters['truckId'] = requestParameters.truckId;
        }

        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }

        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/vehicle-management/v1/vehicles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VehicleFromJSON));
    }

    /**
     * Lists Vehicles.
     * List Vehicles.
     */
    async listVehicles(requestParameters: ListVehiclesRequest = {}): Promise<Array<Vehicle>> {
        const response = await this.listVehiclesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists Vehicles.
     * List Vehicles.
     */
    async listVehiclesWithHeaders(requestParameters: ListVehiclesRequest): Promise<[ Array<Vehicle>, Headers ]> {
        const response = await this.listVehiclesRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }

}
