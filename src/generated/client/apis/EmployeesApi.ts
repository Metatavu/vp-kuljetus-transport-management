/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Employee,
    EmployeeFromJSON,
    EmployeeToJSON,
    EmployeeType,
    EmployeeTypeFromJSON,
    EmployeeTypeToJSON,
    Office,
    OfficeFromJSON,
    OfficeToJSON,
    SalaryGroup,
    SalaryGroupFromJSON,
    SalaryGroupToJSON,
} from '../models';

export interface CreateEmployeeRequest {
    employee: Employee;
}

export interface DeleteEmployeeRequest {
    employeeId: string;
}

export interface FindEmployeeRequest {
    employeeId: string;
}

export interface ListEmployeesRequest {
    search?: string;
    salaryGroup?: SalaryGroup;
    type?: EmployeeType;
    office?: Office;
    archived?: boolean;
    first?: number;
    max?: number;
}

export interface UpdateEmployeeRequest {
    employee: Employee;
    employeeId: string;
}

/**
 * 
 */
export class EmployeesApi extends runtime.BaseAPI {
    /**
     * Creates Employee. All new users created via this endpoint should be given the employee realm role.
     * Create Employee.
     */
    async createEmployeeRaw(requestParameters: CreateEmployeeRequest): Promise<runtime.ApiResponse<Employee>> {
        if (requestParameters.employee === null || requestParameters.employee === undefined) {
            throw new runtime.RequiredError('employee','Required parameter requestParameters.employee was null or undefined when calling createEmployee.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user-management/v1/employees`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmployeeToJSON(requestParameters.employee),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeFromJSON(jsonValue));
    }
    /**
     * Creates Employee. All new users created via this endpoint should be given the employee realm role.
     * Create Employee.
     */
    async createEmployee(requestParameters: CreateEmployeeRequest): Promise<Employee> {
        const response = await this.createEmployeeRaw(requestParameters);
        return await response.value();
    }
    /**
     * Creates Employee. All new users created via this endpoint should be given the employee realm role.
     * Create Employee.
     */
    async createEmployeeWithHeaders(requestParameters: CreateEmployeeRequest): Promise<[ Employee, Headers ]> {
        const response = await this.createEmployeeRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Deletes Employee. This should only be allowed to be used in tests. In production usage the employee should be archived instead. 
     * Delete Employee.
     */
    async deleteEmployeeRaw(requestParameters: DeleteEmployeeRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.employeeId === null || requestParameters.employeeId === undefined) {
            throw new runtime.RequiredError('employeeId','Required parameter requestParameters.employeeId was null or undefined when calling deleteEmployee.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user-management/v1/employees/{employeeId}`.replace(`{${"employeeId"}}`, encodeURIComponent(String(requestParameters.employeeId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Deletes Employee. This should only be allowed to be used in tests. In production usage the employee should be archived instead. 
     * Delete Employee.
     */
    async deleteEmployee(requestParameters: DeleteEmployeeRequest): Promise<void> {
        await this.deleteEmployeeRaw(requestParameters);
    }
    /**
     * Deletes Employee. This should only be allowed to be used in tests. In production usage the employee should be archived instead. 
     * Delete Employee.
     */
    async deleteEmployeeWithHeaders(requestParameters: DeleteEmployeeRequest): Promise<Headers> {
        const response = await this.deleteEmployeeRaw(requestParameters);
        return response.raw.headers;
    }
    /**
     * Finds an employee by ID.
     * Find an employee.
     */
    async findEmployeeRaw(requestParameters: FindEmployeeRequest): Promise<runtime.ApiResponse<Employee>> {
        if (requestParameters.employeeId === null || requestParameters.employeeId === undefined) {
            throw new runtime.RequiredError('employeeId','Required parameter requestParameters.employeeId was null or undefined when calling findEmployee.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user-management/v1/employees/{employeeId}`.replace(`{${"employeeId"}}`, encodeURIComponent(String(requestParameters.employeeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeFromJSON(jsonValue));
    }
    /**
     * Finds an employee by ID.
     * Find an employee.
     */
    async findEmployee(requestParameters: FindEmployeeRequest): Promise<Employee> {
        const response = await this.findEmployeeRaw(requestParameters);
        return await response.value();
    }
    /**
     * Finds an employee by ID.
     * Find an employee.
     */
    async findEmployeeWithHeaders(requestParameters: FindEmployeeRequest): Promise<[ Employee, Headers ]> {
        const response = await this.findEmployeeRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Lists Employees. A user is considered an employee if they\'re given the employee realm role.
     * List Employees.
     */
    async listEmployeesRaw(requestParameters: ListEmployeesRequest): Promise<runtime.ApiResponse<Array<Employee>>> {
        const queryParameters: any = {};
        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }
        if (requestParameters.salaryGroup !== undefined) {
            queryParameters['salaryGroup'] = requestParameters.salaryGroup;
        }
        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }
        if (requestParameters.office !== undefined) {
            queryParameters['office'] = requestParameters.office;
        }
        if (requestParameters.archived !== undefined) {
            queryParameters['archived'] = requestParameters.archived;
        }
        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }
        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user-management/v1/employees`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EmployeeFromJSON));
    }
    /**
     * Lists Employees. A user is considered an employee if they\'re given the employee realm role.
     * List Employees.
     */
    async listEmployees(requestParameters: ListEmployeesRequest = {}): Promise<Array<Employee>> {
        const response = await this.listEmployeesRaw(requestParameters);
        return await response.value();
    }
    /**
     * Lists Employees. A user is considered an employee if they\'re given the employee realm role.
     * List Employees.
     */
    async listEmployeesWithHeaders(requestParameters: ListEmployeesRequest): Promise<[ Array<Employee>, Headers ]> {
        const response = await this.listEmployeesRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Updates Employee.
     * Update Employee.
     */
    async updateEmployeeRaw(requestParameters: UpdateEmployeeRequest): Promise<runtime.ApiResponse<Employee>> {
        if (requestParameters.employee === null || requestParameters.employee === undefined) {
            throw new runtime.RequiredError('employee','Required parameter requestParameters.employee was null or undefined when calling updateEmployee.');
        }
        if (requestParameters.employeeId === null || requestParameters.employeeId === undefined) {
            throw new runtime.RequiredError('employeeId','Required parameter requestParameters.employeeId was null or undefined when calling updateEmployee.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user-management/v1/employees/{employeeId}`.replace(`{${"employeeId"}}`, encodeURIComponent(String(requestParameters.employeeId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmployeeToJSON(requestParameters.employee),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => EmployeeFromJSON(jsonValue));
    }
    /**
     * Updates Employee.
     * Update Employee.
     */
    async updateEmployee(requestParameters: UpdateEmployeeRequest): Promise<Employee> {
        const response = await this.updateEmployeeRaw(requestParameters);
        return await response.value();
    }
    /**
     * Updates Employee.
     * Update Employee.
     */
    async updateEmployeeWithHeaders(requestParameters: UpdateEmployeeRequest): Promise<[ Employee, Headers ]> {
        const response = await this.updateEmployeeRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
}
