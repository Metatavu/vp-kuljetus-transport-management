/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
    ThermalMonitor,
    ThermalMonitorFromJSON,
    ThermalMonitorToJSON,
    ThermalMonitorStatus,
    ThermalMonitorStatusFromJSON,
    ThermalMonitorStatusToJSON,
} from '../models';
import { DateTime } from "luxon";
export interface CreateThermalMonitorRequest {
    thermalMonitor: ThermalMonitor;
}
export interface DeleteThermalMonitorRequest {
    thermalMonitorId: string;
}
export interface FindThermalMonitorRequest {
    thermalMonitorId: string;
}
export interface ListThermalMonitorsRequest {
    status?: ThermalMonitorStatus;
    activeAfter?: Date;
    activeBefore?: Date;
    first?: number;
    max?: number;
}
export interface UpdateThermalMonitorRequest {
    thermalMonitor: ThermalMonitor;
    thermalMonitorId: string;
}
/**
 * 
 */
export class ThermalMonitorsApi extends runtime.BaseAPI {
    /**
     * Create new thermal monitor
     * Create thermal monitor
     */
    async createThermalMonitorRaw(requestParameters: CreateThermalMonitorRequest): Promise<runtime.ApiResponse<ThermalMonitor>> {
        if (requestParameters.thermalMonitor === null || requestParameters.thermalMonitor === undefined) {
            throw new runtime.RequiredError('thermalMonitor','Required parameter requestParameters.thermalMonitor was null or undefined when calling createThermalMonitor.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/monitoring/v1/thermalMonitors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ThermalMonitorToJSON(requestParameters.thermalMonitor),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ThermalMonitorFromJSON(jsonValue));
    }
    /**
     * Create new thermal monitor
     * Create thermal monitor
     */
    async createThermalMonitor(requestParameters: CreateThermalMonitorRequest): Promise<ThermalMonitor> {
        const response = await this.createThermalMonitorRaw(requestParameters);
        return await response.value();
    }
    /**
     * Create new thermal monitor
     * Create thermal monitor
     */
    async createThermalMonitorWithHeaders(requestParameters: CreateThermalMonitorRequest): Promise<[ ThermalMonitor, Headers ]> {
        const response = await this.createThermalMonitorRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Deletes thermal monitor
     * Deletes thermal monitor
     */
    async deleteThermalMonitorRaw(requestParameters: DeleteThermalMonitorRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.thermalMonitorId === null || requestParameters.thermalMonitorId === undefined) {
            throw new runtime.RequiredError('thermalMonitorId','Required parameter requestParameters.thermalMonitorId was null or undefined when calling deleteThermalMonitor.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/monitoring/v1/thermalMonitors/{thermalMonitorId}`.replace(`{${"thermalMonitorId"}}`, encodeURIComponent(String(requestParameters.thermalMonitorId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Deletes thermal monitor
     * Deletes thermal monitor
     */
    async deleteThermalMonitor(requestParameters: DeleteThermalMonitorRequest): Promise<void> {
        await this.deleteThermalMonitorRaw(requestParameters);
    }
    /**
     * Deletes thermal monitor
     * Deletes thermal monitor
     */
    async deleteThermalMonitorWithHeaders(requestParameters: DeleteThermalMonitorRequest): Promise<Headers> {
        const response = await this.deleteThermalMonitorRaw(requestParameters);
        return response.raw.headers;
    }
    /**
     * Retrieve the details of a specific thermal monitor
     * Find a thermal monitor by ID
     */
    async findThermalMonitorRaw(requestParameters: FindThermalMonitorRequest): Promise<runtime.ApiResponse<ThermalMonitor>> {
        if (requestParameters.thermalMonitorId === null || requestParameters.thermalMonitorId === undefined) {
            throw new runtime.RequiredError('thermalMonitorId','Required parameter requestParameters.thermalMonitorId was null or undefined when calling findThermalMonitor.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/monitoring/v1/thermalMonitors/{thermalMonitorId}`.replace(`{${"thermalMonitorId"}}`, encodeURIComponent(String(requestParameters.thermalMonitorId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ThermalMonitorFromJSON(jsonValue));
    }
    /**
     * Retrieve the details of a specific thermal monitor
     * Find a thermal monitor by ID
     */
    async findThermalMonitor(requestParameters: FindThermalMonitorRequest): Promise<ThermalMonitor> {
        const response = await this.findThermalMonitorRaw(requestParameters);
        return await response.value();
    }
    /**
     * Retrieve the details of a specific thermal monitor
     * Find a thermal monitor by ID
     */
    async findThermalMonitorWithHeaders(requestParameters: FindThermalMonitorRequest): Promise<[ ThermalMonitor, Headers ]> {
        const response = await this.findThermalMonitorRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Retrieve a list of all thermal monitors.  Can optionally be filtered by status. 
     * List thermal monitors
     */
    async listThermalMonitorsRaw(requestParameters: ListThermalMonitorsRequest): Promise<runtime.ApiResponse<Array<ThermalMonitor>>> {
        const queryParameters: any = {};
        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }
        if (requestParameters.activeAfter !== undefined) {
            queryParameters['activeAfter'] = DateTime.fromJSDate(requestParameters.activeAfter as any).toISO();
        }
        if (requestParameters.activeBefore !== undefined) {
            queryParameters['activeBefore'] = DateTime.fromJSDate(requestParameters.activeBefore as any).toISO();
        }
        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }
        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/monitoring/v1/thermalMonitors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ThermalMonitorFromJSON));
    }
    /**
     * Retrieve a list of all thermal monitors.  Can optionally be filtered by status. 
     * List thermal monitors
     */
    async listThermalMonitors(requestParameters: ListThermalMonitorsRequest = {}): Promise<Array<ThermalMonitor>> {
        const response = await this.listThermalMonitorsRaw(requestParameters);
        return await response.value();
    }
    /**
     * Retrieve a list of all thermal monitors.  Can optionally be filtered by status. 
     * List thermal monitors
     */
    async listThermalMonitorsWithHeaders(requestParameters: ListThermalMonitorsRequest): Promise<[ Array<ThermalMonitor>, Headers ]> {
        const response = await this.listThermalMonitorsRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Update the details of a specific thermal monitor
     * Update thermal monitor
     */
    async updateThermalMonitorRaw(requestParameters: UpdateThermalMonitorRequest): Promise<runtime.ApiResponse<ThermalMonitor>> {
        if (requestParameters.thermalMonitor === null || requestParameters.thermalMonitor === undefined) {
            throw new runtime.RequiredError('thermalMonitor','Required parameter requestParameters.thermalMonitor was null or undefined when calling updateThermalMonitor.');
        }
        if (requestParameters.thermalMonitorId === null || requestParameters.thermalMonitorId === undefined) {
            throw new runtime.RequiredError('thermalMonitorId','Required parameter requestParameters.thermalMonitorId was null or undefined when calling updateThermalMonitor.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/monitoring/v1/thermalMonitors/{thermalMonitorId}`.replace(`{${"thermalMonitorId"}}`, encodeURIComponent(String(requestParameters.thermalMonitorId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ThermalMonitorToJSON(requestParameters.thermalMonitor),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ThermalMonitorFromJSON(jsonValue));
    }
    /**
     * Update the details of a specific thermal monitor
     * Update thermal monitor
     */
    async updateThermalMonitor(requestParameters: UpdateThermalMonitorRequest): Promise<ThermalMonitor> {
        const response = await this.updateThermalMonitorRaw(requestParameters);
        return await response.value();
    }
    /**
     * Update the details of a specific thermal monitor
     * Update thermal monitor
     */
    async updateThermalMonitorWithHeaders(requestParameters: UpdateThermalMonitorRequest): Promise<[ ThermalMonitor, Headers ]> {
        const response = await this.updateThermalMonitorRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
}
