/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
    ThermalMonitorPagingPolicy,
    ThermalMonitorPagingPolicyFromJSON,
    ThermalMonitorPagingPolicyToJSON,
} from '../models';
import { DateTime } from "luxon";
export interface CreatePagingPolicyRequest {
    thermalMonitorPagingPolicy: ThermalMonitorPagingPolicy;
    thermalMonitorId: string;
}
export interface DeletePagingPolicyRequest {
    thermalMonitorId: string;
    pagingPolicyId: string;
}
export interface FindPagingPolicyRequest {
    thermalMonitorId: string;
    pagingPolicyId: string;
}
export interface ListPagingPoliciesRequest {
    thermalMonitorId: string;
    first: number;
    max: number;
}
export interface UpdatePagingPolicyRequest {
    thermalMonitorPagingPolicy: ThermalMonitorPagingPolicy;
    thermalMonitorId: string;
    pagingPolicyId: string;
}
/**
 * 
 */
export class ThermalMonitorPagingPoliciesApi extends runtime.BaseAPI {
    /**
     * Create new paging policy for a thermal monitor
     * Create paging policy
     */
    async createPagingPolicyRaw(requestParameters: CreatePagingPolicyRequest): Promise<runtime.ApiResponse<ThermalMonitorPagingPolicy>> {
        if (requestParameters.thermalMonitorPagingPolicy === null || requestParameters.thermalMonitorPagingPolicy === undefined) {
            throw new runtime.RequiredError('thermalMonitorPagingPolicy','Required parameter requestParameters.thermalMonitorPagingPolicy was null or undefined when calling createPagingPolicy.');
        }
        if (requestParameters.thermalMonitorId === null || requestParameters.thermalMonitorId === undefined) {
            throw new runtime.RequiredError('thermalMonitorId','Required parameter requestParameters.thermalMonitorId was null or undefined when calling createPagingPolicy.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/monitoring/v1/thermalMonitors/{thermalMonitorId}/pagingPolicies`.replace(`{${"thermalMonitorId"}}`, encodeURIComponent(String(requestParameters.thermalMonitorId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ThermalMonitorPagingPolicyToJSON(requestParameters.thermalMonitorPagingPolicy),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ThermalMonitorPagingPolicyFromJSON(jsonValue));
    }
    /**
     * Create new paging policy for a thermal monitor
     * Create paging policy
     */
    async createPagingPolicy(requestParameters: CreatePagingPolicyRequest): Promise<ThermalMonitorPagingPolicy> {
        const response = await this.createPagingPolicyRaw(requestParameters);
        return await response.value();
    }
    /**
     * Create new paging policy for a thermal monitor
     * Create paging policy
     */
    async createPagingPolicyWithHeaders(requestParameters: CreatePagingPolicyRequest): Promise<[ ThermalMonitorPagingPolicy, Headers ]> {
        const response = await this.createPagingPolicyRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Deletes paging policy
     * Deletes
     */
    async deletePagingPolicyRaw(requestParameters: DeletePagingPolicyRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.thermalMonitorId === null || requestParameters.thermalMonitorId === undefined) {
            throw new runtime.RequiredError('thermalMonitorId','Required parameter requestParameters.thermalMonitorId was null or undefined when calling deletePagingPolicy.');
        }
        if (requestParameters.pagingPolicyId === null || requestParameters.pagingPolicyId === undefined) {
            throw new runtime.RequiredError('pagingPolicyId','Required parameter requestParameters.pagingPolicyId was null or undefined when calling deletePagingPolicy.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/monitoring/v1/thermalMonitors/{thermalMonitorId}/pagingPolicies/{pagingPolicyId}`.replace(`{${"thermalMonitorId"}}`, encodeURIComponent(String(requestParameters.thermalMonitorId))).replace(`{${"pagingPolicyId"}}`, encodeURIComponent(String(requestParameters.pagingPolicyId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Deletes paging policy
     * Deletes
     */
    async deletePagingPolicy(requestParameters: DeletePagingPolicyRequest): Promise<void> {
        await this.deletePagingPolicyRaw(requestParameters);
    }
    /**
     * Deletes paging policy
     * Deletes
     */
    async deletePagingPolicyWithHeaders(requestParameters: DeletePagingPolicyRequest): Promise<Headers> {
        const response = await this.deletePagingPolicyRaw(requestParameters);
        return response.raw.headers;
    }
    /**
     * Retrieve the details of a specific paging policy
     * Find a paging policy by ID
     */
    async findPagingPolicyRaw(requestParameters: FindPagingPolicyRequest): Promise<runtime.ApiResponse<ThermalMonitorPagingPolicy>> {
        if (requestParameters.thermalMonitorId === null || requestParameters.thermalMonitorId === undefined) {
            throw new runtime.RequiredError('thermalMonitorId','Required parameter requestParameters.thermalMonitorId was null or undefined when calling findPagingPolicy.');
        }
        if (requestParameters.pagingPolicyId === null || requestParameters.pagingPolicyId === undefined) {
            throw new runtime.RequiredError('pagingPolicyId','Required parameter requestParameters.pagingPolicyId was null or undefined when calling findPagingPolicy.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/monitoring/v1/thermalMonitors/{thermalMonitorId}/pagingPolicies/{pagingPolicyId}`.replace(`{${"thermalMonitorId"}}`, encodeURIComponent(String(requestParameters.thermalMonitorId))).replace(`{${"pagingPolicyId"}}`, encodeURIComponent(String(requestParameters.pagingPolicyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ThermalMonitorPagingPolicyFromJSON(jsonValue));
    }
    /**
     * Retrieve the details of a specific paging policy
     * Find a paging policy by ID
     */
    async findPagingPolicy(requestParameters: FindPagingPolicyRequest): Promise<ThermalMonitorPagingPolicy> {
        const response = await this.findPagingPolicyRaw(requestParameters);
        return await response.value();
    }
    /**
     * Retrieve the details of a specific paging policy
     * Find a paging policy by ID
     */
    async findPagingPolicyWithHeaders(requestParameters: FindPagingPolicyRequest): Promise<[ ThermalMonitorPagingPolicy, Headers ]> {
        const response = await this.findPagingPolicyRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Retrieve a list of all paging policies for a specific thermal monitor. 
     * List paging policies
     */
    async listPagingPoliciesRaw(requestParameters: ListPagingPoliciesRequest): Promise<runtime.ApiResponse<Array<ThermalMonitorPagingPolicy>>> {
        if (requestParameters.thermalMonitorId === null || requestParameters.thermalMonitorId === undefined) {
            throw new runtime.RequiredError('thermalMonitorId','Required parameter requestParameters.thermalMonitorId was null or undefined when calling listPagingPolicies.');
        }
        if (requestParameters.first === null || requestParameters.first === undefined) {
            throw new runtime.RequiredError('first','Required parameter requestParameters.first was null or undefined when calling listPagingPolicies.');
        }
        if (requestParameters.max === null || requestParameters.max === undefined) {
            throw new runtime.RequiredError('max','Required parameter requestParameters.max was null or undefined when calling listPagingPolicies.');
        }
        const queryParameters: any = {};
        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }
        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/monitoring/v1/thermalMonitors/{thermalMonitorId}/pagingPolicies`.replace(`{${"thermalMonitorId"}}`, encodeURIComponent(String(requestParameters.thermalMonitorId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ThermalMonitorPagingPolicyFromJSON));
    }
    /**
     * Retrieve a list of all paging policies for a specific thermal monitor. 
     * List paging policies
     */
    async listPagingPolicies(requestParameters: ListPagingPoliciesRequest): Promise<Array<ThermalMonitorPagingPolicy>> {
        const response = await this.listPagingPoliciesRaw(requestParameters);
        return await response.value();
    }
    /**
     * Retrieve a list of all paging policies for a specific thermal monitor. 
     * List paging policies
     */
    async listPagingPoliciesWithHeaders(requestParameters: ListPagingPoliciesRequest): Promise<[ Array<ThermalMonitorPagingPolicy>, Headers ]> {
        const response = await this.listPagingPoliciesRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Update the details of a specific paging policy
     * Update paging policy
     */
    async updatePagingPolicyRaw(requestParameters: UpdatePagingPolicyRequest): Promise<runtime.ApiResponse<ThermalMonitorPagingPolicy>> {
        if (requestParameters.thermalMonitorPagingPolicy === null || requestParameters.thermalMonitorPagingPolicy === undefined) {
            throw new runtime.RequiredError('thermalMonitorPagingPolicy','Required parameter requestParameters.thermalMonitorPagingPolicy was null or undefined when calling updatePagingPolicy.');
        }
        if (requestParameters.thermalMonitorId === null || requestParameters.thermalMonitorId === undefined) {
            throw new runtime.RequiredError('thermalMonitorId','Required parameter requestParameters.thermalMonitorId was null or undefined when calling updatePagingPolicy.');
        }
        if (requestParameters.pagingPolicyId === null || requestParameters.pagingPolicyId === undefined) {
            throw new runtime.RequiredError('pagingPolicyId','Required parameter requestParameters.pagingPolicyId was null or undefined when calling updatePagingPolicy.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/monitoring/v1/thermalMonitors/{thermalMonitorId}/pagingPolicies/{pagingPolicyId}`.replace(`{${"thermalMonitorId"}}`, encodeURIComponent(String(requestParameters.thermalMonitorId))).replace(`{${"pagingPolicyId"}}`, encodeURIComponent(String(requestParameters.pagingPolicyId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ThermalMonitorPagingPolicyToJSON(requestParameters.thermalMonitorPagingPolicy),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => ThermalMonitorPagingPolicyFromJSON(jsonValue));
    }
    /**
     * Update the details of a specific paging policy
     * Update paging policy
     */
    async updatePagingPolicy(requestParameters: UpdatePagingPolicyRequest): Promise<ThermalMonitorPagingPolicy> {
        const response = await this.updatePagingPolicyRaw(requestParameters);
        return await response.value();
    }
    /**
     * Update the details of a specific paging policy
     * Update paging policy
     */
    async updatePagingPolicyWithHeaders(requestParameters: UpdatePagingPolicyRequest): Promise<[ ThermalMonitorPagingPolicy, Headers ]> {
        const response = await this.updatePagingPolicyRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
}
