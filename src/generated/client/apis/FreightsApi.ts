/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Freight,
    FreightFromJSON,
    FreightToJSON,
} from '../models';

export interface CreateFreightRequest {
    freight: Freight;
}

export interface DeleteFreightRequest {
    freightId: string;
}

export interface FindFreightRequest {
    freightId: string;
}

export interface ListFreightsRequest {
    first?: number;
    max?: number;
}

export interface UpdateFreightRequest {
    freight: Freight;
    freightId: string;
}

/**
 * 
 */
export class FreightsApi extends runtime.BaseAPI {
    /**
     * Create new freight
     * Create freight
     */
    async createFreightRaw(requestParameters: CreateFreightRequest): Promise<runtime.ApiResponse<Freight>> {
        if (requestParameters.freight === null || requestParameters.freight === undefined) {
            throw new runtime.RequiredError('freight','Required parameter requestParameters.freight was null or undefined when calling createFreight.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/delivery-info/v1/freights`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FreightToJSON(requestParameters.freight),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => FreightFromJSON(jsonValue));
    }
    /**
     * Create new freight
     * Create freight
     */
    async createFreight(requestParameters: CreateFreightRequest): Promise<Freight> {
        const response = await this.createFreightRaw(requestParameters);
        return await response.value();
    }
    /**
     * Create new freight
     * Create freight
     */
    async createFreightWithHeaders(requestParameters: CreateFreightRequest): Promise<[ Freight, Headers ]> {
        const response = await this.createFreightRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Deletes freight
     * Deletes freight
     */
    async deleteFreightRaw(requestParameters: DeleteFreightRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.freightId === null || requestParameters.freightId === undefined) {
            throw new runtime.RequiredError('freightId','Required parameter requestParameters.freightId was null or undefined when calling deleteFreight.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/delivery-info/v1/freights/{freightId}`.replace(`{${"freightId"}}`, encodeURIComponent(String(requestParameters.freightId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Deletes freight
     * Deletes freight
     */
    async deleteFreight(requestParameters: DeleteFreightRequest): Promise<void> {
        await this.deleteFreightRaw(requestParameters);
    }
    /**
     * Deletes freight
     * Deletes freight
     */
    async deleteFreightWithHeaders(requestParameters: DeleteFreightRequest): Promise<Headers> {
        const response = await this.deleteFreightRaw(requestParameters);
        return response.raw.headers;
    }
    /**
     * Finds a freight by id.
     * Find a freight.
     */
    async findFreightRaw(requestParameters: FindFreightRequest): Promise<runtime.ApiResponse<Freight>> {
        if (requestParameters.freightId === null || requestParameters.freightId === undefined) {
            throw new runtime.RequiredError('freightId','Required parameter requestParameters.freightId was null or undefined when calling findFreight.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["driver", "manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/delivery-info/v1/freights/{freightId}`.replace(`{${"freightId"}}`, encodeURIComponent(String(requestParameters.freightId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => FreightFromJSON(jsonValue));
    }
    /**
     * Finds a freight by id.
     * Find a freight.
     */
    async findFreight(requestParameters: FindFreightRequest): Promise<Freight> {
        const response = await this.findFreightRaw(requestParameters);
        return await response.value();
    }
    /**
     * Finds a freight by id.
     * Find a freight.
     */
    async findFreightWithHeaders(requestParameters: FindFreightRequest): Promise<[ Freight, Headers ]> {
        const response = await this.findFreightRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Lists Freights.
     * List Freights.
     */
    async listFreightsRaw(requestParameters: ListFreightsRequest): Promise<runtime.ApiResponse<Array<Freight>>> {
        const queryParameters: any = {};
        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }
        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["driver", "manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/delivery-info/v1/freights`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FreightFromJSON));
    }
    /**
     * Lists Freights.
     * List Freights.
     */
    async listFreights(requestParameters: ListFreightsRequest = {}): Promise<Array<Freight>> {
        const response = await this.listFreightsRaw(requestParameters);
        return await response.value();
    }
    /**
     * Lists Freights.
     * List Freights.
     */
    async listFreightsWithHeaders(requestParameters: ListFreightsRequest): Promise<[ Array<Freight>, Headers ]> {
        const response = await this.listFreightsRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Updates single freight
     * Updates freight
     */
    async updateFreightRaw(requestParameters: UpdateFreightRequest): Promise<runtime.ApiResponse<Freight>> {
        if (requestParameters.freight === null || requestParameters.freight === undefined) {
            throw new runtime.RequiredError('freight','Required parameter requestParameters.freight was null or undefined when calling updateFreight.');
        }
        if (requestParameters.freightId === null || requestParameters.freightId === undefined) {
            throw new runtime.RequiredError('freightId','Required parameter requestParameters.freightId was null or undefined when calling updateFreight.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/delivery-info/v1/freights/{freightId}`.replace(`{${"freightId"}}`, encodeURIComponent(String(requestParameters.freightId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FreightToJSON(requestParameters.freight),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => FreightFromJSON(jsonValue));
    }
    /**
     * Updates single freight
     * Updates freight
     */
    async updateFreight(requestParameters: UpdateFreightRequest): Promise<Freight> {
        const response = await this.updateFreightRaw(requestParameters);
        return await response.value();
    }
    /**
     * Updates single freight
     * Updates freight
     */
    async updateFreightWithHeaders(requestParameters: UpdateFreightRequest): Promise<[ Freight, Headers ]> {
        const response = await this.updateFreightRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
}
