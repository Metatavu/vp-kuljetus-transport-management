/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
    TerminalThermometer,
    TerminalThermometerFromJSON,
    TerminalThermometerToJSON,
    TruckOrTowableThermometer,
    TruckOrTowableThermometerFromJSON,
    TruckOrTowableThermometerToJSON,
    UpdateTruckOrTowableThermometerRequest,
    UpdateTruckOrTowableThermometerRequestFromJSON,
    UpdateTruckOrTowableThermometerRequestToJSON,
} from '../models';
import { DateTime } from "luxon";
export interface FindTerminalThermometerRequest {
    thermometerId: string;
}
export interface FindTruckOrTowableThermometerRequest {
    thermometerId: string;
}
export interface ListTerminalThermometersRequest {
    siteId?: string;
    includeArchived?: boolean;
    first?: number;
    max?: number;
}
export interface ListTruckOrTowableThermometersRequest {
    entityId?: string;
    entityType?: ListTruckOrTowableThermometersEntityTypeEnum;
    includeArchived?: boolean;
    first?: number;
    max?: number;
}
export interface UpdateTerminalThermometerRequest {
    updateTruckOrTowableThermometerRequest: UpdateTruckOrTowableThermometerRequest;
    thermometerId: string;
}
export interface UpdateTruckOrTowableThermometerOperationRequest {
    updateTruckOrTowableThermometerRequest: UpdateTruckOrTowableThermometerRequest;
    thermometerId: string;
}
/**
 * 
 */
export class ThermometersApi extends runtime.BaseAPI {
    /**
     * Retrieve the details of a specific terminal thermometer
     * Find a terminal thermometer by ID
     */
    async findTerminalThermometerRaw(requestParameters: FindTerminalThermometerRequest): Promise<runtime.ApiResponse<TerminalThermometer>> {
        if (requestParameters.thermometerId === null || requestParameters.thermometerId === undefined) {
            throw new runtime.RequiredError('thermometerId','Required parameter requestParameters.thermometerId was null or undefined when calling findTerminalThermometer.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/delivery-info/v1/thermometers/{thermometerId}`.replace(`{${"thermometerId"}}`, encodeURIComponent(String(requestParameters.thermometerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => TerminalThermometerFromJSON(jsonValue));
    }
    /**
     * Retrieve the details of a specific terminal thermometer
     * Find a terminal thermometer by ID
     */
    async findTerminalThermometer(requestParameters: FindTerminalThermometerRequest): Promise<TerminalThermometer> {
        const response = await this.findTerminalThermometerRaw(requestParameters);
        return await response.value();
    }
    /**
     * Retrieve the details of a specific terminal thermometer
     * Find a terminal thermometer by ID
     */
    async findTerminalThermometerWithHeaders(requestParameters: FindTerminalThermometerRequest): Promise<[ TerminalThermometer, Headers ]> {
        const response = await this.findTerminalThermometerRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Retrieve the details of a specific truck or towable thermometer
     * Find truck or towable thermometer by ID
     */
    async findTruckOrTowableThermometerRaw(requestParameters: FindTruckOrTowableThermometerRequest): Promise<runtime.ApiResponse<TruckOrTowableThermometer>> {
        if (requestParameters.thermometerId === null || requestParameters.thermometerId === undefined) {
            throw new runtime.RequiredError('thermometerId','Required parameter requestParameters.thermometerId was null or undefined when calling findTruckOrTowableThermometer.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/vehicle-management/v1/thermometers/{thermometerId}`.replace(`{${"thermometerId"}}`, encodeURIComponent(String(requestParameters.thermometerId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => TruckOrTowableThermometerFromJSON(jsonValue));
    }
    /**
     * Retrieve the details of a specific truck or towable thermometer
     * Find truck or towable thermometer by ID
     */
    async findTruckOrTowableThermometer(requestParameters: FindTruckOrTowableThermometerRequest): Promise<TruckOrTowableThermometer> {
        const response = await this.findTruckOrTowableThermometerRaw(requestParameters);
        return await response.value();
    }
    /**
     * Retrieve the details of a specific truck or towable thermometer
     * Find truck or towable thermometer by ID
     */
    async findTruckOrTowableThermometerWithHeaders(requestParameters: FindTruckOrTowableThermometerRequest): Promise<[ TruckOrTowableThermometer, Headers ]> {
        const response = await this.findTruckOrTowableThermometerRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Retrieve a list of all terminal thermometers.  Can optionally be filtered by site (terminal) association or archived status. 
     * List terminal thermometers
     */
    async listTerminalThermometersRaw(requestParameters: ListTerminalThermometersRequest): Promise<runtime.ApiResponse<Array<TerminalThermometer>>> {
        const queryParameters: any = {};
        if (requestParameters.siteId !== undefined) {
            queryParameters['siteId'] = requestParameters.siteId;
        }
        if (requestParameters.includeArchived !== undefined) {
            queryParameters['includeArchived'] = requestParameters.includeArchived;
        }
        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }
        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/delivery-info/v1/thermometers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TerminalThermometerFromJSON));
    }
    /**
     * Retrieve a list of all terminal thermometers.  Can optionally be filtered by site (terminal) association or archived status. 
     * List terminal thermometers
     */
    async listTerminalThermometers(requestParameters: ListTerminalThermometersRequest = {}): Promise<Array<TerminalThermometer>> {
        const response = await this.listTerminalThermometersRaw(requestParameters);
        return await response.value();
    }
    /**
     * Retrieve a list of all terminal thermometers.  Can optionally be filtered by site (terminal) association or archived status. 
     * List terminal thermometers
     */
    async listTerminalThermometersWithHeaders(requestParameters: ListTerminalThermometersRequest): Promise<[ Array<TerminalThermometer>, Headers ]> {
        const response = await this.listTerminalThermometersRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Retrieve a list of all truck or towable thermometers.  Can optionally be filtered by vehicle association or archived status. 
     * List truck or towable thermometers
     */
    async listTruckOrTowableThermometersRaw(requestParameters: ListTruckOrTowableThermometersRequest): Promise<runtime.ApiResponse<Array<TruckOrTowableThermometer>>> {
        const queryParameters: any = {};
        if (requestParameters.entityId !== undefined) {
            queryParameters['entityId'] = requestParameters.entityId;
        }
        if (requestParameters.entityType !== undefined) {
            queryParameters['entityType'] = requestParameters.entityType;
        }
        if (requestParameters.includeArchived !== undefined) {
            queryParameters['includeArchived'] = requestParameters.includeArchived;
        }
        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }
        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/vehicle-management/v1/thermometers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TruckOrTowableThermometerFromJSON));
    }
    /**
     * Retrieve a list of all truck or towable thermometers.  Can optionally be filtered by vehicle association or archived status. 
     * List truck or towable thermometers
     */
    async listTruckOrTowableThermometers(requestParameters: ListTruckOrTowableThermometersRequest = {}): Promise<Array<TruckOrTowableThermometer>> {
        const response = await this.listTruckOrTowableThermometersRaw(requestParameters);
        return await response.value();
    }
    /**
     * Retrieve a list of all truck or towable thermometers.  Can optionally be filtered by vehicle association or archived status. 
     * List truck or towable thermometers
     */
    async listTruckOrTowableThermometersWithHeaders(requestParameters: ListTruckOrTowableThermometersRequest): Promise<[ Array<TruckOrTowableThermometer>, Headers ]> {
        const response = await this.listTruckOrTowableThermometersRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Update the details of a specific terminal thermometer. Currently only the name can be updated.
     * Update terminal thermometer
     */
    async updateTerminalThermometerRaw(requestParameters: UpdateTerminalThermometerRequest): Promise<runtime.ApiResponse<TerminalThermometer>> {
        if (requestParameters.updateTruckOrTowableThermometerRequest === null || requestParameters.updateTruckOrTowableThermometerRequest === undefined) {
            throw new runtime.RequiredError('updateTruckOrTowableThermometerRequest','Required parameter requestParameters.updateTruckOrTowableThermometerRequest was null or undefined when calling updateTerminalThermometer.');
        }
        if (requestParameters.thermometerId === null || requestParameters.thermometerId === undefined) {
            throw new runtime.RequiredError('thermometerId','Required parameter requestParameters.thermometerId was null or undefined when calling updateTerminalThermometer.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/delivery-info/v1/thermometers/{thermometerId}`.replace(`{${"thermometerId"}}`, encodeURIComponent(String(requestParameters.thermometerId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTruckOrTowableThermometerRequestToJSON(requestParameters.updateTruckOrTowableThermometerRequest),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => TerminalThermometerFromJSON(jsonValue));
    }
    /**
     * Update the details of a specific terminal thermometer. Currently only the name can be updated.
     * Update terminal thermometer
     */
    async updateTerminalThermometer(requestParameters: UpdateTerminalThermometerRequest): Promise<TerminalThermometer> {
        const response = await this.updateTerminalThermometerRaw(requestParameters);
        return await response.value();
    }
    /**
     * Update the details of a specific terminal thermometer. Currently only the name can be updated.
     * Update terminal thermometer
     */
    async updateTerminalThermometerWithHeaders(requestParameters: UpdateTerminalThermometerRequest): Promise<[ TerminalThermometer, Headers ]> {
        const response = await this.updateTerminalThermometerRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Update the details of specific truck or towable thermometer. Currently only the name can be updated.
     * Update truck or towable thermometer
     */
    async updateTruckOrTowableThermometerRaw(requestParameters: UpdateTruckOrTowableThermometerOperationRequest): Promise<runtime.ApiResponse<TruckOrTowableThermometer>> {
        if (requestParameters.updateTruckOrTowableThermometerRequest === null || requestParameters.updateTruckOrTowableThermometerRequest === undefined) {
            throw new runtime.RequiredError('updateTruckOrTowableThermometerRequest','Required parameter requestParameters.updateTruckOrTowableThermometerRequest was null or undefined when calling updateTruckOrTowableThermometer.');
        }
        if (requestParameters.thermometerId === null || requestParameters.thermometerId === undefined) {
            throw new runtime.RequiredError('thermometerId','Required parameter requestParameters.thermometerId was null or undefined when calling updateTruckOrTowableThermometer.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/vehicle-management/v1/thermometers/{thermometerId}`.replace(`{${"thermometerId"}}`, encodeURIComponent(String(requestParameters.thermometerId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTruckOrTowableThermometerRequestToJSON(requestParameters.updateTruckOrTowableThermometerRequest),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => TruckOrTowableThermometerFromJSON(jsonValue));
    }
    /**
     * Update the details of specific truck or towable thermometer. Currently only the name can be updated.
     * Update truck or towable thermometer
     */
    async updateTruckOrTowableThermometer(requestParameters: UpdateTruckOrTowableThermometerOperationRequest): Promise<TruckOrTowableThermometer> {
        const response = await this.updateTruckOrTowableThermometerRaw(requestParameters);
        return await response.value();
    }
    /**
     * Update the details of specific truck or towable thermometer. Currently only the name can be updated.
     * Update truck or towable thermometer
     */
    async updateTruckOrTowableThermometerWithHeaders(requestParameters: UpdateTruckOrTowableThermometerOperationRequest): Promise<[ TruckOrTowableThermometer, Headers ]> {
        const response = await this.updateTruckOrTowableThermometerRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
}
/**
 * @export
 */
export const ListTruckOrTowableThermometersEntityTypeEnum = {
    Truck: 'truck',
    Towable: 'towable'
} as const;

export type ListTruckOrTowableThermometersEntityTypeEnum = typeof ListTruckOrTowableThermometersEntityTypeEnum[keyof typeof ListTruckOrTowableThermometersEntityTypeEnum];
