/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
    PagingPolicyContact,
    PagingPolicyContactFromJSON,
    PagingPolicyContactToJSON,
} from '../models';
import { DateTime } from "luxon";
export interface CreatePagingPolicyContactRequest {
    pagingPolicyContact: PagingPolicyContact;
}
export interface DeletePagingPolicyContactRequest {
    pagingPolicyContactId: string;
}
export interface FindPagingPolicyContactRequest {
    pagingPolicyContactId: string;
}
export interface ListPagingPolicyContactsRequest {
    first?: number;
    max?: number;
}
export interface UpdatePagingPolicyContactRequest {
    pagingPolicyContact: PagingPolicyContact;
    pagingPolicyContactId: string;
}
/**
 * 
 */
export class PagingPolicyContactsApi extends runtime.BaseAPI {
    /**
     * Create new paging policy contact
     * Create paging policy contact
     */
    async createPagingPolicyContactRaw(requestParameters: CreatePagingPolicyContactRequest): Promise<runtime.ApiResponse<PagingPolicyContact>> {
        if (requestParameters.pagingPolicyContact === null || requestParameters.pagingPolicyContact === undefined) {
            throw new runtime.RequiredError('pagingPolicyContact','Required parameter requestParameters.pagingPolicyContact was null or undefined when calling createPagingPolicyContact.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/monitoring/v1/pagingPolicyContacts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PagingPolicyContactToJSON(requestParameters.pagingPolicyContact),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => PagingPolicyContactFromJSON(jsonValue));
    }
    /**
     * Create new paging policy contact
     * Create paging policy contact
     */
    async createPagingPolicyContact(requestParameters: CreatePagingPolicyContactRequest): Promise<PagingPolicyContact> {
        const response = await this.createPagingPolicyContactRaw(requestParameters);
        return await response.value();
    }
    /**
     * Create new paging policy contact
     * Create paging policy contact
     */
    async createPagingPolicyContactWithHeaders(requestParameters: CreatePagingPolicyContactRequest): Promise<[ PagingPolicyContact, Headers ]> {
        const response = await this.createPagingPolicyContactRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Deletes paging policy contact
     * Deletes paging policy contact
     */
    async deletePagingPolicyContactRaw(requestParameters: DeletePagingPolicyContactRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.pagingPolicyContactId === null || requestParameters.pagingPolicyContactId === undefined) {
            throw new runtime.RequiredError('pagingPolicyContactId','Required parameter requestParameters.pagingPolicyContactId was null or undefined when calling deletePagingPolicyContact.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/monitoring/v1/pagingPolicyContacts/{pagingPolicyContactId}`.replace(`{${"pagingPolicyContactId"}}`, encodeURIComponent(String(requestParameters.pagingPolicyContactId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Deletes paging policy contact
     * Deletes paging policy contact
     */
    async deletePagingPolicyContact(requestParameters: DeletePagingPolicyContactRequest): Promise<void> {
        await this.deletePagingPolicyContactRaw(requestParameters);
    }
    /**
     * Deletes paging policy contact
     * Deletes paging policy contact
     */
    async deletePagingPolicyContactWithHeaders(requestParameters: DeletePagingPolicyContactRequest): Promise<Headers> {
        const response = await this.deletePagingPolicyContactRaw(requestParameters);
        return response.raw.headers;
    }
    /**
     * Retrieve the details of a specific paging policy contact
     * Find a paging policy contact by ID
     */
    async findPagingPolicyContactRaw(requestParameters: FindPagingPolicyContactRequest): Promise<runtime.ApiResponse<PagingPolicyContact>> {
        if (requestParameters.pagingPolicyContactId === null || requestParameters.pagingPolicyContactId === undefined) {
            throw new runtime.RequiredError('pagingPolicyContactId','Required parameter requestParameters.pagingPolicyContactId was null or undefined when calling findPagingPolicyContact.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/monitoring/v1/pagingPolicyContacts/{pagingPolicyContactId}`.replace(`{${"pagingPolicyContactId"}}`, encodeURIComponent(String(requestParameters.pagingPolicyContactId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => PagingPolicyContactFromJSON(jsonValue));
    }
    /**
     * Retrieve the details of a specific paging policy contact
     * Find a paging policy contact by ID
     */
    async findPagingPolicyContact(requestParameters: FindPagingPolicyContactRequest): Promise<PagingPolicyContact> {
        const response = await this.findPagingPolicyContactRaw(requestParameters);
        return await response.value();
    }
    /**
     * Retrieve the details of a specific paging policy contact
     * Find a paging policy contact by ID
     */
    async findPagingPolicyContactWithHeaders(requestParameters: FindPagingPolicyContactRequest): Promise<[ PagingPolicyContact, Headers ]> {
        const response = await this.findPagingPolicyContactRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Retrieve a list of all paging policy contacts. 
     * List paging policy contacts
     */
    async listPagingPolicyContactsRaw(requestParameters: ListPagingPolicyContactsRequest): Promise<runtime.ApiResponse<Array<PagingPolicyContact>>> {
        const queryParameters: any = {};
        if (requestParameters.first !== undefined) {
            queryParameters['first'] = requestParameters.first;
        }
        if (requestParameters.max !== undefined) {
            queryParameters['max'] = requestParameters.max;
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/monitoring/v1/pagingPolicyContacts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PagingPolicyContactFromJSON));
    }
    /**
     * Retrieve a list of all paging policy contacts. 
     * List paging policy contacts
     */
    async listPagingPolicyContacts(requestParameters: ListPagingPolicyContactsRequest = {}): Promise<Array<PagingPolicyContact>> {
        const response = await this.listPagingPolicyContactsRaw(requestParameters);
        return await response.value();
    }
    /**
     * Retrieve a list of all paging policy contacts. 
     * List paging policy contacts
     */
    async listPagingPolicyContactsWithHeaders(requestParameters: ListPagingPolicyContactsRequest): Promise<[ Array<PagingPolicyContact>, Headers ]> {
        const response = await this.listPagingPolicyContactsRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
    /**
     * Update the details of a specific paging policy contact
     * Update paging policy contact
     */
    async updatePagingPolicyContactRaw(requestParameters: UpdatePagingPolicyContactRequest): Promise<runtime.ApiResponse<PagingPolicyContact>> {
        if (requestParameters.pagingPolicyContact === null || requestParameters.pagingPolicyContact === undefined) {
            throw new runtime.RequiredError('pagingPolicyContact','Required parameter requestParameters.pagingPolicyContact was null or undefined when calling updatePagingPolicyContact.');
        }
        if (requestParameters.pagingPolicyContactId === null || requestParameters.pagingPolicyContactId === undefined) {
            throw new runtime.RequiredError('pagingPolicyContactId','Required parameter requestParameters.pagingPolicyContactId was null or undefined when calling updatePagingPolicyContact.');
        }
        const queryParameters: any = {};
        const headerParameters: runtime.HTTPHeaders = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/monitoring/v1/pagingPolicyContacts/{pagingPolicyContactId}`.replace(`{${"pagingPolicyContactId"}}`, encodeURIComponent(String(requestParameters.pagingPolicyContactId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PagingPolicyContactToJSON(requestParameters.pagingPolicyContact),
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => PagingPolicyContactFromJSON(jsonValue));
    }
    /**
     * Update the details of a specific paging policy contact
     * Update paging policy contact
     */
    async updatePagingPolicyContact(requestParameters: UpdatePagingPolicyContactRequest): Promise<PagingPolicyContact> {
        const response = await this.updatePagingPolicyContactRaw(requestParameters);
        return await response.value();
    }
    /**
     * Update the details of a specific paging policy contact
     * Update paging policy contact
     */
    async updatePagingPolicyContactWithHeaders(requestParameters: UpdatePagingPolicyContactRequest): Promise<[ PagingPolicyContact, Headers ]> {
        const response = await this.updatePagingPolicyContactRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
}
