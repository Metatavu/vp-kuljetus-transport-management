/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Vehicle Management Services (management)
 * Vehicle Management Services (management)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
    WorkShiftChangeSet,
    WorkShiftChangeSetFromJSON,
    WorkShiftChangeSetToJSON,
} from '../models';
import { DateTime } from "luxon";
export interface ListWorkShiftChangeSetsRequest {
    employeeId: string;
    workShiftDateAfter?: Date;
    workShiftDateBefore?: Date;
}
/**
 * 
 */
export class WorkShiftChangeSetsApi extends runtime.BaseAPI {
    /**
     * List Employees work shift change sets.
     * List Employees work shift change sets.
     */
    async listWorkShiftChangeSetsRaw(requestParameters: ListWorkShiftChangeSetsRequest): Promise<runtime.ApiResponse<Array<WorkShiftChangeSet>>> {
        if (requestParameters.employeeId === null || requestParameters.employeeId === undefined) {
            throw new runtime.RequiredError('employeeId','Required parameter requestParameters.employeeId was null or undefined when calling listWorkShiftChangeSets.');
        }
        const queryParameters: any = {};
        if (requestParameters.workShiftDateAfter !== undefined) {
            queryParameters['workShiftDateAfter'] = DateTime.fromJSDate(requestParameters.workShiftDateAfter as any).toISODate();
        }
        if (requestParameters.workShiftDateBefore !== undefined) {
            queryParameters['workShiftDateBefore'] = DateTime.fromJSDate(requestParameters.workShiftDateBefore as any).toISODate();
        }
        const headerParameters: runtime.HTTPHeaders = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("BearerAuth", ["manager"]);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/user-management/v1/employees/{employeeId}/workShiftChangeSets`.replace(`{${"employeeId"}}`, encodeURIComponent(String(requestParameters.employeeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(WorkShiftChangeSetFromJSON));
    }
    /**
     * List Employees work shift change sets.
     * List Employees work shift change sets.
     */
    async listWorkShiftChangeSets(requestParameters: ListWorkShiftChangeSetsRequest): Promise<Array<WorkShiftChangeSet>> {
        const response = await this.listWorkShiftChangeSetsRaw(requestParameters);
        return await response.value();
    }
    /**
     * List Employees work shift change sets.
     * List Employees work shift change sets.
     */
    async listWorkShiftChangeSetsWithHeaders(requestParameters: ListWorkShiftChangeSetsRequest): Promise<[ Array<WorkShiftChangeSet>, Headers ]> {
        const response = await this.listWorkShiftChangeSetsRaw(requestParameters);
        const value = await response.value(); 
        return [ value, response.raw.headers ];
    }
}
